// Copyright (c) 2022 Max-Gerd Retzlaff <mgr@matroid.org>, Datagraph GmbH.
// Distributed under the terms of the GNU General Public License, Version 2.0,
// see file LICENSE in the top level directory of this repository.

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCFFI
#define SWIGCFFI
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


#include <NdbApi.hpp>
#include <API.hpp>

EXPORT int _wrap_ndb_init () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)ndb_init();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ndb_end (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ndb_end(arg1);
    
  } catch (...) {
    
  }
}


EXPORT Ndb_cluster_connection_node_iter *_wrap_new_Ndb_cluster_connection_node_iter () {
  Ndb_cluster_connection_node_iter * lresult = (Ndb_cluster_connection_node_iter *)0 ;
  Ndb_cluster_connection_node_iter *result = 0 ;
  
  try {
    result = (Ndb_cluster_connection_node_iter *)new Ndb_cluster_connection_node_iter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection_node_iter *)0;
  }
}


EXPORT void _wrap_delete_Ndb_cluster_connection_node_iter (Ndb_cluster_connection_node_iter *larg1) {
  Ndb_cluster_connection_node_iter *arg1 = (Ndb_cluster_connection_node_iter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Ndb_cluster_connection *_wrap_new_Ndb_cluster_connection__SWIG_0 (char *larg1) {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  char *arg1 = (char *) 0 ;
  Ndb_cluster_connection *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Ndb_cluster_connection *)new Ndb_cluster_connection((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT Ndb_cluster_connection *_wrap_new_Ndb_cluster_connection__SWIG_1 () {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  Ndb_cluster_connection *result = 0 ;
  
  try {
    result = (Ndb_cluster_connection *)new Ndb_cluster_connection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT Ndb_cluster_connection *_wrap_new_Ndb_cluster_connection__SWIG_2 (char *larg1, int larg2) {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  Ndb_cluster_connection *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Ndb_cluster_connection *)new Ndb_cluster_connection((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT Ndb_cluster_connection *_wrap_new_Ndb_cluster_connection__SWIG_3 (char *larg1, Ndb_cluster_connection *larg2) {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  char *arg1 = (char *) 0 ;
  Ndb_cluster_connection *arg2 = (Ndb_cluster_connection *) 0 ;
  Ndb_cluster_connection *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Ndb_cluster_connection *)new Ndb_cluster_connection((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT Ndb_cluster_connection *_wrap_new_Ndb_cluster_connection__SWIG_4 (char *larg1, Ndb_cluster_connection *larg2, int larg3) {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  char *arg1 = (char *) 0 ;
  Ndb_cluster_connection *arg2 = (Ndb_cluster_connection *) 0 ;
  int arg3 ;
  Ndb_cluster_connection *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Ndb_cluster_connection *)new Ndb_cluster_connection((char const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT void _wrap_delete_Ndb_cluster_connection (Ndb_cluster_connection *larg1) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_data_node_neighbour (Ndb_cluster_connection *larg1, Uint32 larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_data_node_neighbour(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_name (Ndb_cluster_connection *larg1, char *larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_name((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_service_uri (Ndb_cluster_connection *larg1, char *larg2, char *larg3, int larg4, char *larg5) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->set_service_uri((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_timeout (Ndb_cluster_connection *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_timeout(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_connect__SWIG_0 (Ndb_cluster_connection *larg1, int larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->connect(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_connect__SWIG_1 (Ndb_cluster_connection *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->connect(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_connect__SWIG_2 (Ndb_cluster_connection *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->connect(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_connect__SWIG_3 (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->connect();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_start_connect_thread__SWIG_0 (Ndb_cluster_connection *larg1, int (*larg2)(void)) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int (*arg2)(void) = (int (*)(void)) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->start_connect_thread(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_start_connect_thread__SWIG_1 (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->start_connect_thread();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_wait_until_ready__SWIG_0 (Ndb_cluster_connection *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->wait_until_ready(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Ndb_cluster_connection_lock_ndb_objects (Ndb_cluster_connection *larg1) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  
  arg1 = larg1;
  try {
    ((Ndb_cluster_connection const *)arg1)->lock_ndb_objects();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_cluster_connection_unlock_ndb_objects (Ndb_cluster_connection *larg1) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  
  arg1 = larg1;
  try {
    ((Ndb_cluster_connection const *)arg1)->unlock_ndb_objects();
    
  } catch (...) {
    
  }
}


EXPORT Ndb *_wrap_Ndb_cluster_connection_get_next_ndb_object (Ndb_cluster_connection *larg1, Ndb *larg2) {
  Ndb * lresult = (Ndb *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Ndb *)(arg1)->get_next_ndb_object((Ndb const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_latest_error (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Ndb_cluster_connection const *)arg1)->get_latest_error();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_cluster_connection_get_latest_error_msg (Ndb_cluster_connection *larg1) {
  char * lresult = (char *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb_cluster_connection const *)arg1)->get_latest_error_msg();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_auto_reconnect (Ndb_cluster_connection *larg1, int larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_auto_reconnect(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_auto_reconnect (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Ndb_cluster_connection const *)arg1)->get_auto_reconnect();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_cluster_connection_get_system_name (Ndb_cluster_connection *larg1) {
  char * lresult = (char *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb_cluster_connection const *)arg1)->get_system_name();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT Uint32 _wrap_Ndb_cluster_connection_collect_client_stats (Ndb_cluster_connection *larg1, Uint64 *larg2, Uint32 larg3) {
  Uint32 lresult = (Uint32)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint64 *arg2 = (Uint64 *) 0 ;
  Uint32 arg3 ;
  Uint32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Uint32)(arg1)->collect_client_stats(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_error_print (Ndb_cluster_connection *larg1, int larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->set_error_print(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_max_adaptive_send_time (Ndb_cluster_connection *larg1, Uint32 larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_max_adaptive_send_time(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Ndb_cluster_connection_get_max_adaptive_send_time (Ndb_cluster_connection *larg1) {
  Uint32 lresult = (Uint32)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)(arg1)->get_max_adaptive_send_time();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_num_recv_threads (Ndb_cluster_connection *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_num_recv_threads(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_num_recv_threads (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Ndb_cluster_connection const *)arg1)->get_num_recv_threads();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_unset_recv_thread_cpu (Ndb_cluster_connection *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->unset_recv_thread_cpu(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_recv_thread_cpu__SWIG_0 (Ndb_cluster_connection *larg1, Uint16 larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint16 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_recv_thread_cpu(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_recv_thread_cpu__SWIG_1 (Ndb_cluster_connection *larg1, Uint16 *larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint16 *arg2 = (Uint16 *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->set_recv_thread_cpu(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_recv_thread_cpu__SWIG_2 (Ndb_cluster_connection *larg1, Uint16 *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint16 *arg2 = (Uint16 *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->set_recv_thread_cpu(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_set_recv_thread_activation_threshold (Ndb_cluster_connection *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_recv_thread_activation_threshold(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_recv_thread_activation_threshold (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Ndb_cluster_connection const *)arg1)->get_recv_thread_activation_threshold();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_no_ready (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->get_no_ready();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_cluster_connection_get_connectstring (Ndb_cluster_connection *larg1, char *larg2, int larg3) {
  char * lresult = (char *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (char *)((Ndb_cluster_connection const *)arg1)->get_connectstring(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_get_connected_port (Ndb_cluster_connection *larg1) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Ndb_cluster_connection const *)arg1)->get_connected_port();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_cluster_connection_get_connected_host (Ndb_cluster_connection *larg1) {
  char * lresult = (char *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb_cluster_connection const *)arg1)->get_connected_host();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Ndb_cluster_connection_set_optimized_node_selection (Ndb_cluster_connection *larg1, int larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_optimized_node_selection(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_no_db_nodes (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->no_db_nodes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_max_api_nodeid (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Ndb_cluster_connection const *)arg1)->max_api_nodeid();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_max_nodegroup (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->max_nodegroup();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_node_id (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->node_id();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_connect_count (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Ndb_cluster_connection const *)arg1)->get_connect_count();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_min_db_version (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Ndb_cluster_connection const *)arg1)->get_min_db_version();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_min_api_version (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Ndb_cluster_connection const *)arg1)->get_min_api_version();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Ndb_cluster_connection_init_get_next_node (Ndb_cluster_connection *larg1, Ndb_cluster_connection_node_iter *larg2) {
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Ndb_cluster_connection_node_iter *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->init_get_next_node(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_next_node (Ndb_cluster_connection *larg1, Ndb_cluster_connection_node_iter *larg2) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Ndb_cluster_connection_node_iter *arg2 = 0 ;
  unsigned int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (unsigned int)(arg1)->get_next_node(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_next_alive_node (Ndb_cluster_connection *larg1, Ndb_cluster_connection_node_iter *larg2) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Ndb_cluster_connection_node_iter *arg2 = 0 ;
  unsigned int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (unsigned int)(arg1)->get_next_alive_node(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_cluster_connection_get_active_ndb_objects (Ndb_cluster_connection *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Ndb_cluster_connection const *)arg1)->get_active_ndb_objects();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT Uint64 *_wrap_Ndb_cluster_connection_get_latest_trans_gci (Ndb_cluster_connection *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint64 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Uint64 *)(arg1)->get_latest_trans_gci();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT NdbWaitGroup *_wrap_Ndb_cluster_connection_create_ndb_wait_group (Ndb_cluster_connection *larg1, int larg2) {
  NdbWaitGroup * lresult = (NdbWaitGroup *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int arg2 ;
  NdbWaitGroup *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbWaitGroup *)(arg1)->create_ndb_wait_group(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbWaitGroup *)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_release_ndb_wait_group (Ndb_cluster_connection *larg1, NdbWaitGroup *larg2) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  NdbWaitGroup *arg2 = (NdbWaitGroup *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->release_ndb_wait_group(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_cluster_connection_wait_until_ready__SWIG_1 (Ndb_cluster_connection *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->wait_until_ready((int const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_ndberror_status_message (ndberror_status larg1) {
  char * lresult = (char *)0 ;
  ndberror_status arg1 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ndberror_status_message(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ndberror_classification_message (ndberror_classification larg1) {
  char * lresult = (char *)0 ;
  ndberror_classification arg1 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ndberror_classification_message(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_ndberror_update (ndberror_struct *larg1) {
  ndberror_struct *arg1 = (ndberror_struct *) 0 ;
  
  arg1 = larg1;
  try {
    ndberror_update(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ndb_error_string (int larg1, char *larg2, int larg3) {
  int lresult = (int)0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)ndb_error_string(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ndb_error_get_next (int larg1, int *larg2, char **larg3, char **larg4, char **larg5) {
  int lresult = (int)0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)ndb_error_get_next(arg1,arg2,(char const **)arg3,(char const **)arg4,(char const **)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary *_wrap_new_NdbDictionary () {
  NdbDictionary * lresult = (NdbDictionary *)0 ;
  NdbDictionary *result = 0 ;
  
  try {
    result = (NdbDictionary *)new NdbDictionary();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary *)0;
  }
}


EXPORT NdbDictionary::RecordType _wrap_NdbDictionary_getRecordType (NdbRecord *larg1) {
  NdbDictionary::RecordType lresult = (NdbDictionary::RecordType)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  NdbDictionary::RecordType result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::RecordType)NdbDictionary::getRecordType((NdbRecord const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::RecordType)0;
  }
}


EXPORT char *_wrap_NdbDictionary_getRecordTableName (NdbRecord *larg1) {
  char * lresult = (char *)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)NdbDictionary::getRecordTableName((NdbRecord const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_NdbDictionary_getRecordIndexName (NdbRecord *larg1) {
  char * lresult = (char *)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)NdbDictionary::getRecordIndexName((NdbRecord const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_NdbDictionary_getFirstAttrId (NdbRecord *larg1, Uint32 *larg2) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  Uint32 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)NdbDictionary::getFirstAttrId((NdbRecord const *)arg1,*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbDictionary_getNextAttrId (NdbRecord *larg1, Uint32 *larg2) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  Uint32 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)NdbDictionary::getNextAttrId((NdbRecord const *)arg1,*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbDictionary_getOffset (NdbRecord *larg1, Uint32 larg2, Uint32 *larg3) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  Uint32 arg2 ;
  Uint32 *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)NdbDictionary::getOffset((NdbRecord const *)arg1,arg2,*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbDictionary_getNullBitOffset (NdbRecord *larg1, Uint32 larg2, Uint32 *larg3, Uint32 *larg4) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  Uint32 arg2 ;
  Uint32 *arg3 = 0 ;
  Uint32 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)NdbDictionary::getNullBitOffset((NdbRecord const *)arg1,arg2,*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_NdbDictionary_getValuePtr__SWIG_0 (NdbRecord *larg1, char *larg2, Uint32 larg3) {
  char * lresult = (char *)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (char *)NdbDictionary::getValuePtr((NdbRecord const *)arg1,(char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_NdbDictionary_getValuePtr__SWIG_1 (NdbRecord *larg1, char *larg2, Uint32 larg3) {
  char * lresult = (char *)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (char *)NdbDictionary::getValuePtr((NdbRecord const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_NdbDictionary_isNull (NdbRecord *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)NdbDictionary::isNull((NdbRecord const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbDictionary_setNull (NdbRecord *larg1, char *larg2, Uint32 larg3, int larg4) {
  int lresult = (int)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)NdbDictionary::setNull((NdbRecord const *)arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 _wrap_NdbDictionary_getRecordRowLength (NdbRecord *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbRecord *arg1 = (NdbRecord *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)NdbDictionary::getRecordRowLength((NdbRecord const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT unsigned char *_wrap_NdbDictionary_getEmptyBitmask () {
  unsigned char * lresult = (unsigned char *)0 ;
  unsigned char *result = 0 ;
  
  try {
    result = (unsigned char *)NdbDictionary::getEmptyBitmask();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned char *)0;
  }
}


EXPORT NdbOut *_wrap_NdbDictionary_printFormattedValue (NdbOut *larg1, NdbDictionary::NdbDataPrintFormat *larg2, NdbDictionary::Column *larg3, void *larg4) {
  NdbOut * lresult = (NdbOut *)0 ;
  NdbOut *arg1 = 0 ;
  NdbDictionary::NdbDataPrintFormat *arg2 = 0 ;
  NdbDictionary::Column *arg3 = (NdbDictionary::Column *) 0 ;
  void *arg4 = (void *) 0 ;
  NdbOut *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOut *) &NdbDictionary::printFormattedValue(*arg1,(NdbDictionary::NdbDataPrintFormat const &)*arg2,(NdbDictionary::Column const *)arg3,(void const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOut *)0;
  }
}


EXPORT void _wrap_delete_NdbDictionary (NdbDictionary *larg1) {
  NdbDictionary *arg1 = (NdbDictionary *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Object (NdbDictionary::Object *larg1) {
  NdbDictionary::Object *arg1 = (NdbDictionary::Object *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Object_getObjectStatus (NdbDictionary::Object *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Object *arg1 = (NdbDictionary::Object *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Object const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Object_getObjectVersion (NdbDictionary::Object *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Object *arg1 = (NdbDictionary::Object *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Object const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Object_getObjectId (NdbDictionary::Object *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Object *arg1 = (NdbDictionary::Object *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Object const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::ObjectId *_wrap_new_ObjectId () {
  NdbDictionary::ObjectId * lresult = (NdbDictionary::ObjectId *)0 ;
  NdbDictionary::ObjectId *result = 0 ;
  
  try {
    result = (NdbDictionary::ObjectId *)new NdbDictionary::ObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::ObjectId *)0;
  }
}


EXPORT void _wrap_delete_ObjectId (NdbDictionary::ObjectId *larg1) {
  NdbDictionary::ObjectId *arg1 = (NdbDictionary::ObjectId *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_ObjectId_getObjectStatus (NdbDictionary::ObjectId *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::ObjectId *arg1 = (NdbDictionary::ObjectId *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::ObjectId const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_ObjectId_getObjectVersion (NdbDictionary::ObjectId *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::ObjectId *arg1 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::ObjectId const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ObjectId_getObjectId (NdbDictionary::ObjectId *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::ObjectId *arg1 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::ObjectId const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Column_getName (NdbDictionary::Column *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Column const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Column_getNullable (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getNullable();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getPrimaryKey (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getPrimaryKey();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getColumnNo (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getColumnNo();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getAttrId (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getAttrId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_equal (NdbDictionary::Column *larg1, NdbDictionary::Column *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->equal((NdbDictionary::Column const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column::Type _wrap_Column_getType (NdbDictionary::Column *larg1) {
  NdbDictionary::Column::Type lresult = (NdbDictionary::Column::Type)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::Type result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column::Type)((NdbDictionary::Column const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column::Type)0;
  }
}


EXPORT int _wrap_Column_getPrecision (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getPrecision();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getScale (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getScale();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getLength (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getSizeInBytesForRecord (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getSizeInBytesForRecord();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT CHARSET_INFO *_wrap_Column_getCharset (NdbDictionary::Column *larg1) {
  CHARSET_INFO * lresult = (CHARSET_INFO *)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  CHARSET_INFO *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (CHARSET_INFO *)((NdbDictionary::Column const *)arg1)->getCharset();
    lresult = result;
    return lresult;
  } catch (...) {
    return (CHARSET_INFO *)0;
  }
}


EXPORT int _wrap_Column_getCharsetNumber (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getCharsetNumber();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getInlineSize (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getInlineSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getPartSize (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getPartSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getStripeSize (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getStripeSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getSize (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getPartitionKey (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getPartitionKey();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getDistributionKey (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getDistributionKey();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column::ArrayType _wrap_Column_getArrayType (NdbDictionary::Column *larg1) {
  NdbDictionary::Column::ArrayType lresult = (NdbDictionary::Column::ArrayType)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::ArrayType result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column::ArrayType)((NdbDictionary::Column const *)arg1)->getArrayType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column::ArrayType)0;
  }
}


EXPORT NdbDictionary::Column::StorageType _wrap_Column_getStorageType (NdbDictionary::Column *larg1) {
  NdbDictionary::Column::StorageType lresult = (NdbDictionary::Column::StorageType)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::StorageType result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column::StorageType)((NdbDictionary::Column const *)arg1)->getStorageType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column::StorageType)0;
  }
}


EXPORT int _wrap_Column_getDynamic (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getDynamic();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getIndexSourced (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getIndexSourced();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_new_Column__SWIG_0 (char *larg1) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  char *arg1 = (char *) 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column *)new NdbDictionary::Column((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_new_Column__SWIG_1 () {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Column *result = 0 ;
  
  try {
    result = (NdbDictionary::Column *)new NdbDictionary::Column();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_new_Column__SWIG_2 (NdbDictionary::Column *larg1) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Column *arg1 = 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column *)new NdbDictionary::Column((NdbDictionary::Column const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT void _wrap_delete_Column (NdbDictionary::Column *larg1) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Column_setName (NdbDictionary::Column *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Column_setNullable (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setNullable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setPrimaryKey (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setPrimaryKey(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setType (NdbDictionary::Column *larg1, NdbDictionary::Column::Type larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::Type arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setPrecision (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPrecision(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setScale (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setScale(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setLength (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLength(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setCharset (NdbDictionary::Column *larg1, CHARSET_INFO *larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  CHARSET_INFO *arg2 = (CHARSET_INFO *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCharset(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setInlineSize (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setInlineSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setPartSize (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPartSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setStripeSize (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setStripeSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setPartitionKey (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setPartitionKey(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setDistributionKey (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDistributionKey(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setArrayType (NdbDictionary::Column *larg1, NdbDictionary::Column::ArrayType larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::ArrayType arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setArrayType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setStorageType (NdbDictionary::Column *larg1, NdbDictionary::Column::StorageType larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column::StorageType arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setStorageType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Column_setDynamic (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDynamic(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Column_setDefaultValue__SWIG_0 (NdbDictionary::Column *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setDefaultValue((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_setDefaultValue__SWIG_1 (NdbDictionary::Column *larg1, void *larg2, unsigned int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setDefaultValue((void const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void *_wrap_Column_getDefaultValue__SWIG_0 (NdbDictionary::Column *larg1, unsigned int *larg2) {
  void * lresult = (void *)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (void *)((NdbDictionary::Column const *)arg1)->getDefaultValue(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_Column_getDefaultValue__SWIG_1 (NdbDictionary::Column *larg1) {
  void * lresult = (void *)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((NdbDictionary::Column const *)arg1)->getDefaultValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Column_getBlobTable (NdbDictionary::Column *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)((NdbDictionary::Column const *)arg1)->getBlobTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT void _wrap_Column_setAutoIncrement (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAutoIncrement(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Column_getAutoIncrement (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Column const *)arg1)->getAutoIncrement();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Column_setAutoIncrementInitialValue (NdbDictionary::Column *larg1, Uint64 *larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setAutoIncrementInitialValue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Column_getSizeInBytes (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getSizeInBytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Column_getBlobVersion (NdbDictionary::Column *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->getBlobVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Column_setBlobVersion (NdbDictionary::Column *larg1, int larg2) {
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setBlobVersion(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Column_isBindable (NdbDictionary::Column *larg1, NdbDictionary::Column *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Column *arg1 = (NdbDictionary::Column *) 0 ;
  NdbDictionary::Column *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::Column const *)arg1)->isBindable((NdbDictionary::Column const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Table_getName (NdbDictionary::Table *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Table const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Table_getTableId (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getTableId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Table_getColumn__SWIG_0 (NdbDictionary::Table *larg1, char *larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)((NdbDictionary::Table const *)arg1)->getColumn((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Table_getColumn__SWIG_1 (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)(arg1)->getColumn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Table_getColumn__SWIG_2 (NdbDictionary::Table *larg1, char *larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)(arg1)->getColumn((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Table_getColumn__SWIG_3 (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)((NdbDictionary::Table const *)arg1)->getColumn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT int _wrap_Table_getLogging (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getLogging();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Object::FragmentType _wrap_Table_getFragmentType (NdbDictionary::Table *larg1) {
  NdbDictionary::Object::FragmentType lresult = (NdbDictionary::Object::FragmentType)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Object::FragmentType result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::FragmentType)((NdbDictionary::Table const *)arg1)->getFragmentType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::FragmentType)0;
  }
}


EXPORT int _wrap_Table_getKValue (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getKValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getMinLoadFactor (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getMinLoadFactor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getMaxLoadFactor (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getMaxLoadFactor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getNoOfColumns (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getNoOfColumns();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getNoOfAutoIncrementColumns (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getNoOfAutoIncrementColumns();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getNoOfPrimaryKeys (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getNoOfPrimaryKeys();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Table_getPrimaryKey (NdbDictionary::Table *larg1, int larg2) {
  char * lresult = (char *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)((NdbDictionary::Table const *)arg1)->getPrimaryKey(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Table_equal (NdbDictionary::Table *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->equal((NdbDictionary::Table const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void *_wrap_Table_getFrmData (NdbDictionary::Table *larg1) {
  void * lresult = (void *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((NdbDictionary::Table const *)arg1)->getFrmData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT Uint32 _wrap_Table_getFrmLength (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getFrmLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT NdbRecord *_wrap_Table_getDefaultRecord (NdbDictionary::Table *larg1) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecord *)((NdbDictionary::Table const *)arg1)->getDefaultRecord();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_new_Table__SWIG_0 (char *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  char *arg1 = (char *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)new NdbDictionary::Table((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_new_Table__SWIG_1 () {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Table *result = 0 ;
  
  try {
    result = (NdbDictionary::Table *)new NdbDictionary::Table();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_new_Table__SWIG_2 (NdbDictionary::Table *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Table *arg1 = 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)new NdbDictionary::Table((NdbDictionary::Table const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT void _wrap_delete_Table (NdbDictionary::Table *larg1) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Table *_wrap_Table___assign__ (NdbDictionary::Table *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Table *) &(arg1)->operator =((NdbDictionary::Table const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT int _wrap_Table_setName (NdbDictionary::Table *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_addColumn (NdbDictionary::Table *larg1, NdbDictionary::Column *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Column *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->addColumn((NdbDictionary::Column const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setLogging (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setLogging(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Table_setLinearFlag (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLinearFlag(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getLinearFlag (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getLinearFlag();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setFragmentCount (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFragmentCount(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Table_getFragmentCount (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getFragmentCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint32 _wrap_Table_getPartitionCount (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getPartitionCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Table_setPartitionBalance (NdbDictionary::Table *larg1, NdbDictionary::Object::PartitionBalance larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Object::PartitionBalance arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPartitionBalance(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::PartitionBalance _wrap_Table_getPartitionBalance__SWIG_0 (NdbDictionary::Table *larg1) {
  NdbDictionary::Object::PartitionBalance lresult = (NdbDictionary::Object::PartitionBalance)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Object::PartitionBalance result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::PartitionBalance)((NdbDictionary::Table const *)arg1)->getPartitionBalance();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::PartitionBalance)0;
  }
}


EXPORT NdbDictionary::Object::PartitionBalance _wrap_Table_getPartitionBalance__SWIG_1 (char *larg1) {
  NdbDictionary::Object::PartitionBalance lresult = (NdbDictionary::Object::PartitionBalance)0 ;
  char *arg1 ;
  NdbDictionary::Object::PartitionBalance result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::PartitionBalance)NdbDictionary::Table::getPartitionBalance((char const (*))arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::PartitionBalance)0;
  }
}


EXPORT char *_wrap_Table_getPartitionBalanceString__SWIG_0 (NdbDictionary::Table *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Table const *)arg1)->getPartitionBalanceString();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_Table_getPartitionBalanceString__SWIG_1 (NdbDictionary::Object::PartitionBalance larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Object::PartitionBalance arg1 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)NdbDictionary::Table::getPartitionBalanceString(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Table_setFragmentType (NdbDictionary::Table *larg1, NdbDictionary::Object::FragmentType larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Object::FragmentType arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFragmentType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Table_setKValue (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setKValue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Table_setMinLoadFactor (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinLoadFactor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Table_setMaxLoadFactor (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxLoadFactor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_setTablespaceName (NdbDictionary::Table *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTablespaceName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Table_getTablespaceName (NdbDictionary::Table *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Table const *)arg1)->getTablespaceName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Table_setTablespace (NdbDictionary::Table *larg1, NdbDictionary::Tablespace *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Tablespace *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTablespace((NdbDictionary::Tablespace const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getTablespace__SWIG_0 (NdbDictionary::Table *larg1, Uint32 *larg2, Uint32 *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getTablespace(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getTablespace__SWIG_1 (NdbDictionary::Table *larg1, Uint32 *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getTablespace(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getTablespace__SWIG_2 (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getTablespace();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getHashMap__SWIG_0 (NdbDictionary::Table *larg1, Uint32 *larg2, Uint32 *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getHashMap(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getHashMap__SWIG_1 (NdbDictionary::Table *larg1, Uint32 *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getHashMap(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getHashMap__SWIG_2 (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getHashMap();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_setHashMap (NdbDictionary::Table *larg1, NdbDictionary::HashMap *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setHashMap((NdbDictionary::HashMap const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Table_getObjectStatus (NdbDictionary::Table *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Table const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT void _wrap_Table_setStatusInvalid (NdbDictionary::Table *larg1) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  
  arg1 = larg1;
  try {
    ((NdbDictionary::Table const *)arg1)->setStatusInvalid();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getObjectVersion (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setDefaultNoPartitionsFlag (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDefaultNoPartitionsFlag(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Table_getDefaultNoPartitionsFlag (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getDefaultNoPartitionsFlag();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_Table_getObjectId (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_setFrm (NdbDictionary::Table *larg1, void *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setFrm((void const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_setExtraMetadata (NdbDictionary::Table *larg1, Uint32 larg2, void *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setExtraMetadata(arg2,(void const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getExtraMetadata (NdbDictionary::Table *larg1, Uint32 *larg2, void **larg3, Uint32 *larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = 0 ;
  void **arg3 = (void **) 0 ;
  Uint32 *arg4 = (Uint32 *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getExtraMetadata(*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_setFragmentData (NdbDictionary::Table *larg1, Uint32 *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setFragmentData((Uint32 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 *_wrap_Table_getFragmentData (NdbDictionary::Table *larg1) {
  Uint32 * lresult = (Uint32 *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Uint32 *)((NdbDictionary::Table const *)arg1)->getFragmentData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32 *)0;
  }
}


EXPORT Uint32 _wrap_Table_getFragmentDataLen (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getFragmentDataLen();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_Table_setRangeListData (NdbDictionary::Table *larg1, Int32 *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Int32 *arg2 = (Int32 *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setRangeListData((Int32 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Int32 *_wrap_Table_getRangeListData (NdbDictionary::Table *larg1) {
  Int32 * lresult = (Int32 *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Int32 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Int32 *)((NdbDictionary::Table const *)arg1)->getRangeListData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Int32 *)0;
  }
}


EXPORT Uint32 _wrap_Table_getRangeListDataLen (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getRangeListDataLen();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint32 _wrap_Table_getFragmentNodes (NdbDictionary::Table *larg1, Uint32 larg2, Uint32 *larg3, Uint32 larg4) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  Uint32 arg4 ;
  Uint32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getFragmentNodes(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Table_setMaxRows (NdbDictionary::Table *larg1, Uint64 *larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setMaxRows(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint64 *_wrap_Table_getMaxRows (NdbDictionary::Table *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::Table const *)arg1)->getMaxRows();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT void _wrap_Table_setMinRows (NdbDictionary::Table *larg1, Uint64 *larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setMinRows(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint64 *_wrap_Table_getMinRows (NdbDictionary::Table *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::Table const *)arg1)->getMinRows();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT void _wrap_Table_setSingleUserMode (NdbDictionary::Table *larg1, enum NdbDictionary::Table::SingleUserMode larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  enum NdbDictionary::Table::SingleUserMode arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSingleUserMode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT enum NdbDictionary::Table::SingleUserMode _wrap_Table_getSingleUserMode (NdbDictionary::Table *larg1) {
  enum NdbDictionary::Table::SingleUserMode lresult = (enum NdbDictionary::Table::SingleUserMode)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  enum NdbDictionary::Table::SingleUserMode result;
  
  arg1 = larg1;
  try {
    result = (enum NdbDictionary::Table::SingleUserMode)((NdbDictionary::Table const *)arg1)->getSingleUserMode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (enum NdbDictionary::Table::SingleUserMode)0;
  }
}


EXPORT void _wrap_Table_setRowGCIIndicator (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setRowGCIIndicator(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getRowGCIIndicator (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getRowGCIIndicator();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setRowChecksumIndicator (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setRowChecksumIndicator(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getRowChecksumIndicator (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getRowChecksumIndicator();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setReadBackupFlag (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setReadBackupFlag(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getReadBackupFlag (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getReadBackupFlag();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Table_getMysqlName (NdbDictionary::Table *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Table const *)arg1)->getMysqlName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Table_setStoredTable (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setStoredTable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getStoredTable (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getStoredTable();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getRowSizeInBytes (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getRowSizeInBytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_createTableInDb__SWIG_0 (NdbDictionary::Table *larg1, Ndb *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->createTableInDb(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_createTableInDb__SWIG_1 (NdbDictionary::Table *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->createTableInDb(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getReplicaCount (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->getReplicaCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_getTemporary (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getTemporary();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setTemporary (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setTemporary(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getForceVarPart (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getForceVarPart();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setForceVarPart (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setForceVarPart(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_checkColumns (NdbDictionary::Table *larg1, Uint32 *larg2, unsigned int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Table const *)arg1)->checkColumns((Uint32 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_assignObjId (NdbDictionary::Table *larg1, NdbDictionary::ObjectId *larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::ObjectId *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->assignObjId((NdbDictionary::ObjectId const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Table_setStorageType (NdbDictionary::Table *larg1, NdbDictionary::Column::StorageType larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Column::StorageType arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setStorageType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Column::StorageType _wrap_Table_getStorageType (NdbDictionary::Table *larg1) {
  NdbDictionary::Column::StorageType lresult = (NdbDictionary::Column::StorageType)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::Column::StorageType result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column::StorageType)((NdbDictionary::Table const *)arg1)->getStorageType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column::StorageType)0;
  }
}


EXPORT void _wrap_Table_setExtraRowGciBits (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setExtraRowGciBits(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Table_getExtraRowGciBits (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getExtraRowGciBits();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Table_setExtraRowAuthorBits (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setExtraRowAuthorBits(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Table_getExtraRowAuthorBits (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getExtraRowAuthorBits();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Table_setFullyReplicated (NdbDictionary::Table *larg1, int larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setFullyReplicated(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Table_getFullyReplicated (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->getFullyReplicated();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Table_setRowChecksum (NdbDictionary::Table *larg1, Uint32 larg2) {
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRowChecksum(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Table_getRowChecksum (NdbDictionary::Table *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)(arg1)->getRowChecksum();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_Table_aggregate (NdbDictionary::Table *larg1, NdbError *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbError *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->aggregate(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Table_validate (NdbDictionary::Table *larg1, NdbError *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbError *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->validate(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 _wrap_Table_getPartitionId (NdbDictionary::Table *larg1, Uint32 larg2) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 arg2 ;
  Uint32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Uint32)((NdbDictionary::Table const *)arg1)->getPartitionId(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_Table_hasDefaultValues (NdbDictionary::Table *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Table const *)arg1)->hasDefaultValues();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Index_getName (NdbDictionary::Index *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Index const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_Index_getTable (NdbDictionary::Index *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Index const *)arg1)->getTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT unsigned int _wrap_Index_getNoOfColumns (NdbDictionary::Index *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((NdbDictionary::Index const *)arg1)->getNoOfColumns();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_Index_getNoOfIndexColumns (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Index const *)arg1)->getNoOfIndexColumns();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Index_getColumn (NdbDictionary::Index *larg1, unsigned int larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  unsigned int arg2 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)((NdbDictionary::Index const *)arg1)->getColumn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT char *_wrap_Index_getIndexColumn (NdbDictionary::Index *larg1, int larg2) {
  char * lresult = (char *)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)((NdbDictionary::Index const *)arg1)->getIndexColumn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT NdbDictionary::Index::Type _wrap_Index_getType (NdbDictionary::Index *larg1) {
  NdbDictionary::Index::Type lresult = (NdbDictionary::Index::Type)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Index::Type result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Index::Type)((NdbDictionary::Index const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index::Type)0;
  }
}


EXPORT int _wrap_Index_getLogging (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Index const *)arg1)->getLogging();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Index_getObjectStatus (NdbDictionary::Index *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Index const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Index_getObjectVersion (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Index const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_getObjectId (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Index const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbRecord *_wrap_Index_getDefaultRecord (NdbDictionary::Index *larg1) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecord *)((NdbDictionary::Index const *)arg1)->getDefaultRecord();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbDictionary::Index *_wrap_new_Index__SWIG_0 (char *larg1) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  char *arg1 = (char *) 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Index *)new NdbDictionary::Index((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT NdbDictionary::Index *_wrap_new_Index__SWIG_1 () {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbDictionary::Index *result = 0 ;
  
  try {
    result = (NdbDictionary::Index *)new NdbDictionary::Index();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT void _wrap_delete_Index (NdbDictionary::Index *larg1) {
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Index_setName (NdbDictionary::Index *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_setTable (NdbDictionary::Index *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTable((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_addColumn (NdbDictionary::Index *larg1, NdbDictionary::Column *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Column *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->addColumn((NdbDictionary::Column const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_addColumnName (NdbDictionary::Index *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->addColumnName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_addIndexColumn (NdbDictionary::Index *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->addIndexColumn((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_addColumnNames (NdbDictionary::Index *larg1, unsigned int larg2, char **larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->addColumnNames(arg2,(char const **)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_addIndexColumns (NdbDictionary::Index *larg1, int larg2, char **larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->addIndexColumns(arg2,(char const **)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Index_setType (NdbDictionary::Index *larg1, NdbDictionary::Index::Type larg2) {
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Index::Type arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Index_setLogging (NdbDictionary::Index *larg1, int larg2) {
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setLogging(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Index_setStoredIndex (NdbDictionary::Index *larg1, int larg2) {
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setStoredIndex(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Index_getStoredIndex (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Index const *)arg1)->getStoredIndex();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Index_getTemporary (NdbDictionary::Index *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Index const *)arg1)->getTemporary();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Index_setTemporary (NdbDictionary::Index *larg1, int larg2) {
  NdbDictionary::Index *arg1 = (NdbDictionary::Index *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setTemporary(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::OptimizeTableHandle *_wrap_new_OptimizeTableHandle () {
  NdbDictionary::OptimizeTableHandle * lresult = (NdbDictionary::OptimizeTableHandle *)0 ;
  NdbDictionary::OptimizeTableHandle *result = 0 ;
  
  try {
    result = (NdbDictionary::OptimizeTableHandle *)new NdbDictionary::OptimizeTableHandle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::OptimizeTableHandle *)0;
  }
}


EXPORT void _wrap_delete_OptimizeTableHandle (NdbDictionary::OptimizeTableHandle *larg1) {
  NdbDictionary::OptimizeTableHandle *arg1 = (NdbDictionary::OptimizeTableHandle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_OptimizeTableHandle_next (NdbDictionary::OptimizeTableHandle *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::OptimizeTableHandle *arg1 = (NdbDictionary::OptimizeTableHandle *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->next();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OptimizeTableHandle_close (NdbDictionary::OptimizeTableHandle *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::OptimizeTableHandle *arg1 = (NdbDictionary::OptimizeTableHandle *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->close();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::OptimizeIndexHandle *_wrap_new_OptimizeIndexHandle () {
  NdbDictionary::OptimizeIndexHandle * lresult = (NdbDictionary::OptimizeIndexHandle *)0 ;
  NdbDictionary::OptimizeIndexHandle *result = 0 ;
  
  try {
    result = (NdbDictionary::OptimizeIndexHandle *)new NdbDictionary::OptimizeIndexHandle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::OptimizeIndexHandle *)0;
  }
}


EXPORT void _wrap_delete_OptimizeIndexHandle (NdbDictionary::OptimizeIndexHandle *larg1) {
  NdbDictionary::OptimizeIndexHandle *arg1 = (NdbDictionary::OptimizeIndexHandle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_OptimizeIndexHandle_next (NdbDictionary::OptimizeIndexHandle *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::OptimizeIndexHandle *arg1 = (NdbDictionary::OptimizeIndexHandle *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->next();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OptimizeIndexHandle_close (NdbDictionary::OptimizeIndexHandle *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::OptimizeIndexHandle *arg1 = (NdbDictionary::OptimizeIndexHandle *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->close();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Event *_wrap_new_Event__SWIG_0 (char *larg1) {
  NdbDictionary::Event * lresult = (NdbDictionary::Event *)0 ;
  char *arg1 = (char *) 0 ;
  NdbDictionary::Event *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event *)new NdbDictionary::Event((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event *)0;
  }
}


EXPORT NdbDictionary::Event *_wrap_new_Event__SWIG_1 (char *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Event * lresult = (NdbDictionary::Event *)0 ;
  char *arg1 = (char *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Event *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Event *)new NdbDictionary::Event((char const *)arg1,(NdbDictionary::Table const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event *)0;
  }
}


EXPORT void _wrap_delete_Event (NdbDictionary::Event *larg1) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Event_setName (NdbDictionary::Event *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Event_getName (NdbDictionary::Event *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Event const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Event_getTable (NdbDictionary::Event *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)((NdbDictionary::Event const *)arg1)->getTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT void _wrap_Event_setTable__SWIG_0 (NdbDictionary::Event *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTable((NdbDictionary::Table const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Event_setTable__SWIG_1 (NdbDictionary::Event *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTable((NdbDictionary::Table const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Event_setTable__SWIG_2 (NdbDictionary::Event *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTable((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Event_getTableName (NdbDictionary::Event *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Event const *)arg1)->getTableName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Event_addTableEvent (NdbDictionary::Event *larg1, NdbDictionary::Event::TableEvent larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::TableEvent arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addTableEvent(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Event_getTableEvent (NdbDictionary::Event *larg1, NdbDictionary::Event::TableEvent larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::TableEvent arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::Event const *)arg1)->getTableEvent(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Event_setDurability (NdbDictionary::Event *larg1, NdbDictionary::Event::EventDurability larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::EventDurability arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDurability(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Event::EventDurability _wrap_Event_getDurability (NdbDictionary::Event *larg1) {
  NdbDictionary::Event::EventDurability lresult = (NdbDictionary::Event::EventDurability)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::EventDurability result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event::EventDurability)((NdbDictionary::Event const *)arg1)->getDurability();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event::EventDurability)0;
  }
}


EXPORT void _wrap_Event_setReport (NdbDictionary::Event *larg1, NdbDictionary::Event::EventReport larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::EventReport arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setReport(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Event::EventReport _wrap_Event_getReport (NdbDictionary::Event *larg1) {
  NdbDictionary::Event::EventReport lresult = (NdbDictionary::Event::EventReport)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Event::EventReport result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event::EventReport)((NdbDictionary::Event const *)arg1)->getReport();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event::EventReport)0;
  }
}


EXPORT void _wrap_Event_addColumn (NdbDictionary::Event *larg1, NdbDictionary::Column *larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Column *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addColumn((NdbDictionary::Column const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Event_addEventColumn__SWIG_0 (NdbDictionary::Event *larg1, unsigned int larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addEventColumn(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Event_addEventColumn__SWIG_1 (NdbDictionary::Event *larg1, char *larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addEventColumn((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Event_addEventColumns (NdbDictionary::Event *larg1, int larg2, char **larg3) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addEventColumns(arg2,(char const **)arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Event_getNoOfEventColumns (NdbDictionary::Event *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Event const *)arg1)->getNoOfEventColumns();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_Event_getEventColumn (NdbDictionary::Event *larg1, unsigned int larg2) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  unsigned int arg2 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Column *)((NdbDictionary::Event const *)arg1)->getEventColumn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT void _wrap_Event_mergeEvents (NdbDictionary::Event *larg1, int larg2) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->mergeEvents(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Event_getObjectStatus (NdbDictionary::Event *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Event const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Event_getObjectVersion (NdbDictionary::Event *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Event const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Event_getObjectId (NdbDictionary::Event *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Event const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Event_print (NdbDictionary::Event *larg1) {
  NdbDictionary::Event *arg1 = (NdbDictionary::Event *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->print();
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::LogfileGroup *_wrap_new_LogfileGroup__SWIG_0 () {
  NdbDictionary::LogfileGroup * lresult = (NdbDictionary::LogfileGroup *)0 ;
  NdbDictionary::LogfileGroup *result = 0 ;
  
  try {
    result = (NdbDictionary::LogfileGroup *)new NdbDictionary::LogfileGroup();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::LogfileGroup *)0;
  }
}


EXPORT NdbDictionary::LogfileGroup *_wrap_new_LogfileGroup__SWIG_1 (NdbDictionary::LogfileGroup *larg1) {
  NdbDictionary::LogfileGroup * lresult = (NdbDictionary::LogfileGroup *)0 ;
  NdbDictionary::LogfileGroup *arg1 = 0 ;
  NdbDictionary::LogfileGroup *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::LogfileGroup *)new NdbDictionary::LogfileGroup((NdbDictionary::LogfileGroup const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::LogfileGroup *)0;
  }
}


EXPORT void _wrap_delete_LogfileGroup (NdbDictionary::LogfileGroup *larg1) {
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogfileGroup_setName (NdbDictionary::LogfileGroup *larg1, char *larg2) {
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_LogfileGroup_getName (NdbDictionary::LogfileGroup *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::LogfileGroup const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_LogfileGroup_setUndoBufferSize (NdbDictionary::LogfileGroup *larg1, Uint32 larg2) {
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setUndoBufferSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_LogfileGroup_getUndoBufferSize (NdbDictionary::LogfileGroup *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::LogfileGroup const *)arg1)->getUndoBufferSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_LogfileGroup_setAutoGrowSpecification (NdbDictionary::LogfileGroup *larg1, NdbDictionary::AutoGrowSpecification *larg2) {
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  NdbDictionary::AutoGrowSpecification *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAutoGrowSpecification((NdbDictionary::AutoGrowSpecification const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::AutoGrowSpecification *_wrap_LogfileGroup_getAutoGrowSpecification (NdbDictionary::LogfileGroup *larg1) {
  NdbDictionary::AutoGrowSpecification * lresult = (NdbDictionary::AutoGrowSpecification *)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  NdbDictionary::AutoGrowSpecification *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::AutoGrowSpecification *) &((NdbDictionary::LogfileGroup const *)arg1)->getAutoGrowSpecification();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::AutoGrowSpecification *)0;
  }
}


EXPORT Uint64 *_wrap_LogfileGroup_getUndoFreeWords (NdbDictionary::LogfileGroup *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::LogfileGroup const *)arg1)->getUndoFreeWords();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT NdbDictionary::Object::Status _wrap_LogfileGroup_getObjectStatus (NdbDictionary::LogfileGroup *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::LogfileGroup const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_LogfileGroup_getObjectVersion (NdbDictionary::LogfileGroup *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::LogfileGroup const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_LogfileGroup_getObjectId (NdbDictionary::LogfileGroup *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::LogfileGroup *arg1 = (NdbDictionary::LogfileGroup *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::LogfileGroup const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Tablespace *_wrap_new_Tablespace__SWIG_0 () {
  NdbDictionary::Tablespace * lresult = (NdbDictionary::Tablespace *)0 ;
  NdbDictionary::Tablespace *result = 0 ;
  
  try {
    result = (NdbDictionary::Tablespace *)new NdbDictionary::Tablespace();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Tablespace *)0;
  }
}


EXPORT NdbDictionary::Tablespace *_wrap_new_Tablespace__SWIG_1 (NdbDictionary::Tablespace *larg1) {
  NdbDictionary::Tablespace * lresult = (NdbDictionary::Tablespace *)0 ;
  NdbDictionary::Tablespace *arg1 = 0 ;
  NdbDictionary::Tablespace *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Tablespace *)new NdbDictionary::Tablespace((NdbDictionary::Tablespace const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Tablespace *)0;
  }
}


EXPORT void _wrap_delete_Tablespace (NdbDictionary::Tablespace *larg1) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Tablespace_setName (NdbDictionary::Tablespace *larg1, char *larg2) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Tablespace_getName (NdbDictionary::Tablespace *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Tablespace const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Tablespace_setExtentSize (NdbDictionary::Tablespace *larg1, Uint32 larg2) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setExtentSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_Tablespace_getExtentSize (NdbDictionary::Tablespace *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Tablespace const *)arg1)->getExtentSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Tablespace_setAutoGrowSpecification (NdbDictionary::Tablespace *larg1, NdbDictionary::AutoGrowSpecification *larg2) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  NdbDictionary::AutoGrowSpecification *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAutoGrowSpecification((NdbDictionary::AutoGrowSpecification const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::AutoGrowSpecification *_wrap_Tablespace_getAutoGrowSpecification (NdbDictionary::Tablespace *larg1) {
  NdbDictionary::AutoGrowSpecification * lresult = (NdbDictionary::AutoGrowSpecification *)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  NdbDictionary::AutoGrowSpecification *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::AutoGrowSpecification *) &((NdbDictionary::Tablespace const *)arg1)->getAutoGrowSpecification();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::AutoGrowSpecification *)0;
  }
}


EXPORT void _wrap_Tablespace_setDefaultLogfileGroup__SWIG_0 (NdbDictionary::Tablespace *larg1, char *larg2) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDefaultLogfileGroup((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Tablespace_setDefaultLogfileGroup__SWIG_1 (NdbDictionary::Tablespace *larg1, NdbDictionary::LogfileGroup *larg2) {
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  NdbDictionary::LogfileGroup *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDefaultLogfileGroup((NdbDictionary::LogfileGroup const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Tablespace_getDefaultLogfileGroup (NdbDictionary::Tablespace *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Tablespace const *)arg1)->getDefaultLogfileGroup();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT Uint32 _wrap_Tablespace_getDefaultLogfileGroupId (NdbDictionary::Tablespace *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::Tablespace const *)arg1)->getDefaultLogfileGroupId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Tablespace_getObjectStatus (NdbDictionary::Tablespace *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Tablespace const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Tablespace_getObjectVersion (NdbDictionary::Tablespace *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Tablespace const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Tablespace_getObjectId (NdbDictionary::Tablespace *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Tablespace *arg1 = (NdbDictionary::Tablespace *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Tablespace const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Datafile *_wrap_new_Datafile__SWIG_0 () {
  NdbDictionary::Datafile * lresult = (NdbDictionary::Datafile *)0 ;
  NdbDictionary::Datafile *result = 0 ;
  
  try {
    result = (NdbDictionary::Datafile *)new NdbDictionary::Datafile();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Datafile *)0;
  }
}


EXPORT NdbDictionary::Datafile *_wrap_new_Datafile__SWIG_1 (NdbDictionary::Datafile *larg1) {
  NdbDictionary::Datafile * lresult = (NdbDictionary::Datafile *)0 ;
  NdbDictionary::Datafile *arg1 = 0 ;
  NdbDictionary::Datafile *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Datafile *)new NdbDictionary::Datafile((NdbDictionary::Datafile const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Datafile *)0;
  }
}


EXPORT void _wrap_delete_Datafile (NdbDictionary::Datafile *larg1) {
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Datafile_setPath (NdbDictionary::Datafile *larg1, char *larg2) {
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPath((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Datafile_getPath (NdbDictionary::Datafile *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Datafile const *)arg1)->getPath();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Datafile_setSize (NdbDictionary::Datafile *larg1, Uint64 *larg2) {
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint64 *_wrap_Datafile_getSize (NdbDictionary::Datafile *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::Datafile const *)arg1)->getSize();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint64 *_wrap_Datafile_getFree (NdbDictionary::Datafile *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::Datafile const *)arg1)->getFree();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT int _wrap_Datafile_setTablespace__SWIG_0 (NdbDictionary::Datafile *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTablespace((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Datafile_setTablespace__SWIG_1 (NdbDictionary::Datafile *larg1, NdbDictionary::Tablespace *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  NdbDictionary::Tablespace *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setTablespace((NdbDictionary::Tablespace const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Datafile_getTablespace (NdbDictionary::Datafile *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Datafile const *)arg1)->getTablespace();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Datafile_getTablespaceId (NdbDictionary::Datafile *larg1, NdbDictionary::ObjectId *larg2) {
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  NdbDictionary::ObjectId *arg2 = (NdbDictionary::ObjectId *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((NdbDictionary::Datafile const *)arg1)->getTablespaceId(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Datafile_getObjectStatus (NdbDictionary::Datafile *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Datafile const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Datafile_getObjectVersion (NdbDictionary::Datafile *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Datafile const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Datafile_getObjectId (NdbDictionary::Datafile *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Datafile *arg1 = (NdbDictionary::Datafile *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Datafile const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Undofile *_wrap_new_Undofile__SWIG_0 () {
  NdbDictionary::Undofile * lresult = (NdbDictionary::Undofile *)0 ;
  NdbDictionary::Undofile *result = 0 ;
  
  try {
    result = (NdbDictionary::Undofile *)new NdbDictionary::Undofile();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Undofile *)0;
  }
}


EXPORT NdbDictionary::Undofile *_wrap_new_Undofile__SWIG_1 (NdbDictionary::Undofile *larg1) {
  NdbDictionary::Undofile * lresult = (NdbDictionary::Undofile *)0 ;
  NdbDictionary::Undofile *arg1 = 0 ;
  NdbDictionary::Undofile *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Undofile *)new NdbDictionary::Undofile((NdbDictionary::Undofile const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Undofile *)0;
  }
}


EXPORT void _wrap_delete_Undofile (NdbDictionary::Undofile *larg1) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Undofile_setPath (NdbDictionary::Undofile *larg1, char *larg2) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPath((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Undofile_getPath (NdbDictionary::Undofile *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Undofile const *)arg1)->getPath();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Undofile_setSize (NdbDictionary::Undofile *larg1, Uint64 *larg2) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint64 *_wrap_Undofile_getSize (NdbDictionary::Undofile *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbDictionary::Undofile const *)arg1)->getSize();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT void _wrap_Undofile_setLogfileGroup__SWIG_0 (NdbDictionary::Undofile *larg1, char *larg2) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLogfileGroup((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Undofile_setLogfileGroup__SWIG_1 (NdbDictionary::Undofile *larg1, NdbDictionary::LogfileGroup *larg2) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  NdbDictionary::LogfileGroup *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLogfileGroup((NdbDictionary::LogfileGroup const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Undofile_getLogfileGroup (NdbDictionary::Undofile *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::Undofile const *)arg1)->getLogfileGroup();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Undofile_getLogfileGroupId (NdbDictionary::Undofile *larg1, NdbDictionary::ObjectId *larg2) {
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  NdbDictionary::ObjectId *arg2 = (NdbDictionary::ObjectId *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((NdbDictionary::Undofile const *)arg1)->getLogfileGroupId(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_Undofile_getObjectStatus (NdbDictionary::Undofile *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::Undofile const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_Undofile_getObjectVersion (NdbDictionary::Undofile *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Undofile const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Undofile_getObjectId (NdbDictionary::Undofile *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Undofile *arg1 = (NdbDictionary::Undofile *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Undofile const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::HashMap *_wrap_new_HashMap__SWIG_0 () {
  NdbDictionary::HashMap * lresult = (NdbDictionary::HashMap *)0 ;
  NdbDictionary::HashMap *result = 0 ;
  
  try {
    result = (NdbDictionary::HashMap *)new NdbDictionary::HashMap();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::HashMap *)0;
  }
}


EXPORT NdbDictionary::HashMap *_wrap_new_HashMap__SWIG_1 (NdbDictionary::HashMap *larg1) {
  NdbDictionary::HashMap * lresult = (NdbDictionary::HashMap *)0 ;
  NdbDictionary::HashMap *arg1 = 0 ;
  NdbDictionary::HashMap *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::HashMap *)new NdbDictionary::HashMap((NdbDictionary::HashMap const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::HashMap *)0;
  }
}


EXPORT void _wrap_delete_HashMap (NdbDictionary::HashMap *larg1) {
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_HashMap_setName (NdbDictionary::HashMap *larg1, char *larg2) {
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_HashMap_getName (NdbDictionary::HashMap *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::HashMap const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_HashMap_setMap (NdbDictionary::HashMap *larg1, Uint32 *larg2, Uint32 larg3) {
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setMap((Uint32 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_HashMap_getMapLen (NdbDictionary::HashMap *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbDictionary::HashMap const *)arg1)->getMapLen();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_HashMap_getMapValues (NdbDictionary::HashMap *larg1, Uint32 *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::HashMap const *)arg1)->getMapValues(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_HashMap_equal (NdbDictionary::HashMap *larg1, NdbDictionary::HashMap *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((NdbDictionary::HashMap const *)arg1)->equal((NdbDictionary::HashMap const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Object::Status _wrap_HashMap_getObjectStatus (NdbDictionary::HashMap *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::HashMap const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_HashMap_getObjectVersion (NdbDictionary::HashMap *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::HashMap const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_HashMap_getObjectId (NdbDictionary::HashMap *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::HashMap *arg1 = (NdbDictionary::HashMap *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::HashMap const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::ForeignKey *_wrap_new_ForeignKey__SWIG_0 () {
  NdbDictionary::ForeignKey * lresult = (NdbDictionary::ForeignKey *)0 ;
  NdbDictionary::ForeignKey *result = 0 ;
  
  try {
    result = (NdbDictionary::ForeignKey *)new NdbDictionary::ForeignKey();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::ForeignKey *)0;
  }
}


EXPORT NdbDictionary::ForeignKey *_wrap_new_ForeignKey__SWIG_1 (NdbDictionary::ForeignKey *larg1) {
  NdbDictionary::ForeignKey * lresult = (NdbDictionary::ForeignKey *)0 ;
  NdbDictionary::ForeignKey *arg1 = 0 ;
  NdbDictionary::ForeignKey *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::ForeignKey *)new NdbDictionary::ForeignKey((NdbDictionary::ForeignKey const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::ForeignKey *)0;
  }
}


EXPORT void _wrap_delete_ForeignKey (NdbDictionary::ForeignKey *larg1) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_ForeignKey_getName (NdbDictionary::ForeignKey *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::ForeignKey const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ForeignKey_getParentTable (NdbDictionary::ForeignKey *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::ForeignKey const *)arg1)->getParentTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ForeignKey_getChildTable (NdbDictionary::ForeignKey *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::ForeignKey const *)arg1)->getChildTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT unsigned int _wrap_ForeignKey_getParentColumnCount (NdbDictionary::ForeignKey *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((NdbDictionary::ForeignKey const *)arg1)->getParentColumnCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_ForeignKey_getChildColumnCount (NdbDictionary::ForeignKey *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((NdbDictionary::ForeignKey const *)arg1)->getChildColumnCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_ForeignKey_getParentColumnNo (NdbDictionary::ForeignKey *larg1, unsigned int larg2) {
  int lresult = (int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::ForeignKey const *)arg1)->getParentColumnNo(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ForeignKey_getChildColumnNo (NdbDictionary::ForeignKey *larg1, unsigned int larg2) {
  int lresult = (int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::ForeignKey const *)arg1)->getChildColumnNo(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_ForeignKey_getParentIndex (NdbDictionary::ForeignKey *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::ForeignKey const *)arg1)->getParentIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ForeignKey_getChildIndex (NdbDictionary::ForeignKey *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbDictionary::ForeignKey const *)arg1)->getChildIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT NdbDictionary::ForeignKey::FkAction _wrap_ForeignKey_getOnUpdateAction (NdbDictionary::ForeignKey *larg1) {
  NdbDictionary::ForeignKey::FkAction lresult = (NdbDictionary::ForeignKey::FkAction)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::ForeignKey::FkAction result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::ForeignKey::FkAction)((NdbDictionary::ForeignKey const *)arg1)->getOnUpdateAction();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::ForeignKey::FkAction)0;
  }
}


EXPORT NdbDictionary::ForeignKey::FkAction _wrap_ForeignKey_getOnDeleteAction (NdbDictionary::ForeignKey *larg1) {
  NdbDictionary::ForeignKey::FkAction lresult = (NdbDictionary::ForeignKey::FkAction)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::ForeignKey::FkAction result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::ForeignKey::FkAction)((NdbDictionary::ForeignKey const *)arg1)->getOnDeleteAction();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::ForeignKey::FkAction)0;
  }
}


EXPORT void _wrap_ForeignKey_setName (NdbDictionary::ForeignKey *larg1, char *larg2) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setParent__SWIG_0 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2, NdbDictionary::Index *larg3, NdbDictionary::Column **larg4) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Index *arg3 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Column **arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setParent((NdbDictionary::Table const &)*arg2,(NdbDictionary::Index const *)arg3,(NdbDictionary::Column const *(*))arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setParent__SWIG_1 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2, NdbDictionary::Index *larg3) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Index *arg3 = (NdbDictionary::Index *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setParent((NdbDictionary::Table const &)*arg2,(NdbDictionary::Index const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setParent__SWIG_2 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setParent((NdbDictionary::Table const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setChild__SWIG_0 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2, NdbDictionary::Index *larg3, NdbDictionary::Column **larg4) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Index *arg3 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Column **arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setChild((NdbDictionary::Table const &)*arg2,(NdbDictionary::Index const *)arg3,(NdbDictionary::Column const *(*))arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setChild__SWIG_1 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2, NdbDictionary::Index *larg3) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Index *arg3 = (NdbDictionary::Index *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setChild((NdbDictionary::Table const &)*arg2,(NdbDictionary::Index const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setChild__SWIG_2 (NdbDictionary::ForeignKey *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setChild((NdbDictionary::Table const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setOnUpdateAction (NdbDictionary::ForeignKey *larg1, NdbDictionary::ForeignKey::FkAction larg2) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::ForeignKey::FkAction arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setOnUpdateAction(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ForeignKey_setOnDeleteAction (NdbDictionary::ForeignKey *larg1, NdbDictionary::ForeignKey::FkAction larg2) {
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::ForeignKey::FkAction arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setOnDeleteAction(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Object::Status _wrap_ForeignKey_getObjectStatus (NdbDictionary::ForeignKey *larg1) {
  NdbDictionary::Object::Status lresult = (NdbDictionary::Object::Status)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  NdbDictionary::Object::Status result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Object::Status)((NdbDictionary::ForeignKey const *)arg1)->getObjectStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Object::Status)0;
  }
}


EXPORT int _wrap_ForeignKey_getObjectId (NdbDictionary::ForeignKey *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::ForeignKey const *)arg1)->getObjectId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ForeignKey_getObjectVersion (NdbDictionary::ForeignKey *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::ForeignKey *arg1 = (NdbDictionary::ForeignKey *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::ForeignKey const *)arg1)->getObjectVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listObjects__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, NdbDictionary::Object::Type larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  NdbDictionary::Object::Type arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->listObjects(*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listObjects__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->listObjects(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listObjects__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, NdbDictionary::Object::Type larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  NdbDictionary::Object::Type arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listObjects(*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listObjects__SWIG_3 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listObjects(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listObjects__SWIG_4 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, NdbDictionary::Object::Type larg3, int larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  NdbDictionary::Object::Type arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listObjects(*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbError *_wrap_Dictionary_getNdbError (NdbDictionary::Dictionary *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbDictionary::Dictionary const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT int _wrap_Dictionary_getWarningFlags (NdbDictionary::Dictionary *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->getWarningFlags();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Dictionary_getTable__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Table *)((NdbDictionary::Dictionary const *)arg1)->getTable((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Dictionary_getBlobTable__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, char *larg3) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Table *)(arg1)->getBlobTable((NdbDictionary::Table const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Dictionary_getBlobTable__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, Uint32 larg3) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint32 arg3 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Table *)(arg1)->getBlobTable((NdbDictionary::Table const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT void _wrap_Dictionary_putTable (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->putTable((NdbDictionary::Table const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Index *_wrap_Dictionary_getIndex__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2, char *larg3) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Index *)((NdbDictionary::Dictionary const *)arg1)->getIndex((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT NdbDictionary::Index *_wrap_Dictionary_getIndex__SWIG_1 (NdbDictionary::Dictionary *larg1, char *larg2, NdbDictionary::Table *larg3) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Index *)((NdbDictionary::Dictionary const *)arg1)->getIndex((char const *)arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT int _wrap_Dictionary_listIndexes__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->listIndexes(*arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listIndexes__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listIndexes(*arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listIndexes__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, char *larg3, int larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listIndexes(*arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listIndexes__SWIG_3 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listIndexes(*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listDependentObjects (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listDependentObjects(*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createEvent (NdbDictionary::Dictionary *larg1, NdbDictionary::Event *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Event *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createEvent((NdbDictionary::Event const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropEvent__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->dropEvent((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropEvent__SWIG_1 (NdbDictionary::Dictionary *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropEvent((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Event *_wrap_Dictionary_getEvent (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Event * lresult = (NdbDictionary::Event *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Event *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Event *)(arg1)->getEvent((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event *)0;
  }
}


EXPORT int _wrap_Dictionary_listEvents__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->listEvents(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_listEvents__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Dictionary::List *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Dictionary::List *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->listEvents(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createTable__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createTable((NdbDictionary::Table const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createTable__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::ObjectId *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createTable((NdbDictionary::Table const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_optimizeTable (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::OptimizeTableHandle *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::OptimizeTableHandle *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->optimizeTable((NdbDictionary::Table const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_optimizeIndex (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::OptimizeIndexHandle *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::OptimizeIndexHandle *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->optimizeIndex((NdbDictionary::Index const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropTable__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropTable(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropTable__SWIG_1 (NdbDictionary::Dictionary *larg1, char *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropTable((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_supportedAlterTable (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->supportedAlterTable((NdbDictionary::Table const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_alterTable (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->alterTable((NdbDictionary::Table const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Dictionary_invalidateTable__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->invalidateTable((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_removeCachedTable__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeCachedTable((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_removeCachedIndex__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2, char *larg3) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->removeCachedIndex((char const *)arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_invalidateIndex__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2, char *larg3) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->invalidateIndex((char const *)arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Dictionary_createIndex__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (int)(arg1)->createIndex((NdbDictionary::Index const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createIndex__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createIndex((NdbDictionary::Index const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createIndex__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3, int larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)(arg1)->createIndex((NdbDictionary::Index const &)*arg2,(NdbDictionary::Table const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createIndex__SWIG_3 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createIndex((NdbDictionary::Index const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropIndex (NdbDictionary::Dictionary *larg1, char *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->dropIndex((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_updateIndexStat__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->updateIndexStat((NdbDictionary::Index const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_updateIndexStat__SWIG_1 (NdbDictionary::Dictionary *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->updateIndexStat(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_deleteIndexStat__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->deleteIndexStat((NdbDictionary::Index const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_deleteIndexStat__SWIG_1 (NdbDictionary::Dictionary *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->deleteIndexStat(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Dictionary_removeCachedTable__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeCachedTable((NdbDictionary::Table const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_removeCachedIndex__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeCachedIndex((NdbDictionary::Index const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_invalidateTable__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->invalidateTable((NdbDictionary::Table const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_invalidateIndex__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->invalidateIndex((NdbDictionary::Index const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Dictionary_forceGCPWait__SWIG_0 (NdbDictionary::Dictionary *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->forceGCPWait();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_forceGCPWait__SWIG_1 (NdbDictionary::Dictionary *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->forceGCPWait(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getRestartGCI (NdbDictionary::Dictionary *larg1, Uint32 *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getRestartGCI(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createLogfileGroup__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::LogfileGroup *larg2, NdbDictionary::ObjectId *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::LogfileGroup *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createLogfileGroup((NdbDictionary::LogfileGroup const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createLogfileGroup__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::LogfileGroup *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::LogfileGroup *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createLogfileGroup((NdbDictionary::LogfileGroup const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropLogfileGroup (NdbDictionary::Dictionary *larg1, NdbDictionary::LogfileGroup *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::LogfileGroup *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropLogfileGroup((NdbDictionary::LogfileGroup const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::LogfileGroup *_wrap_Dictionary_getLogfileGroup (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::LogfileGroup * lresult = (NdbDictionary::LogfileGroup *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< NdbDictionary::LogfileGroup > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getLogfileGroup((char const *)arg2);
    lresult = new NdbDictionary::LogfileGroup(result);
    return lresult;
  } catch (...) {
    return (NdbDictionary::LogfileGroup *)0;
  }
}


EXPORT int _wrap_Dictionary_createTablespace__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Tablespace *larg2, NdbDictionary::ObjectId *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Tablespace *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createTablespace((NdbDictionary::Tablespace const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createTablespace__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Tablespace *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Tablespace *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createTablespace((NdbDictionary::Tablespace const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropTablespace (NdbDictionary::Dictionary *larg1, NdbDictionary::Tablespace *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Tablespace *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropTablespace((NdbDictionary::Tablespace const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Tablespace *_wrap_Dictionary_getTablespace__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Tablespace * lresult = (NdbDictionary::Tablespace *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< NdbDictionary::Tablespace > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getTablespace((char const *)arg2);
    lresult = new NdbDictionary::Tablespace(result);
    return lresult;
  } catch (...) {
    return (NdbDictionary::Tablespace *)0;
  }
}


EXPORT NdbDictionary::Tablespace *_wrap_Dictionary_getTablespace__SWIG_1 (NdbDictionary::Dictionary *larg1, Uint32 larg2) {
  NdbDictionary::Tablespace * lresult = (NdbDictionary::Tablespace *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  SwigValueWrapper< NdbDictionary::Tablespace > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getTablespace(arg2);
    lresult = new NdbDictionary::Tablespace(result);
    return lresult;
  } catch (...) {
    return (NdbDictionary::Tablespace *)0;
  }
}


EXPORT int _wrap_Dictionary_createDatafile__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Datafile *larg2, int larg3, NdbDictionary::ObjectId *larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Datafile *arg2 = 0 ;
  bool arg3 ;
  NdbDictionary::ObjectId *arg4 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->createDatafile((NdbDictionary::Datafile const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createDatafile__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Datafile *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Datafile *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (int)(arg1)->createDatafile((NdbDictionary::Datafile const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createDatafile__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Datafile *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Datafile *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createDatafile((NdbDictionary::Datafile const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropDatafile (NdbDictionary::Dictionary *larg1, NdbDictionary::Datafile *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Datafile *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropDatafile((NdbDictionary::Datafile const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Datafile *_wrap_Dictionary_getDatafile (NdbDictionary::Dictionary *larg1, Uint32 larg2, char *larg3) {
  NdbDictionary::Datafile * lresult = (NdbDictionary::Datafile *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< NdbDictionary::Datafile > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->getDatafile(arg2,(char const *)arg3);
    lresult = new NdbDictionary::Datafile(result);
    return lresult;
  } catch (...) {
    return (NdbDictionary::Datafile *)0;
  }
}


EXPORT int _wrap_Dictionary_createUndofile__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Undofile *larg2, int larg3, NdbDictionary::ObjectId *larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Undofile *arg2 = 0 ;
  bool arg3 ;
  NdbDictionary::ObjectId *arg4 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->createUndofile((NdbDictionary::Undofile const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createUndofile__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Undofile *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Undofile *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (int)(arg1)->createUndofile((NdbDictionary::Undofile const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createUndofile__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Undofile *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Undofile *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createUndofile((NdbDictionary::Undofile const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropUndofile (NdbDictionary::Dictionary *larg1, NdbDictionary::Undofile *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Undofile *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropUndofile((NdbDictionary::Undofile const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Undofile *_wrap_Dictionary_getUndofile (NdbDictionary::Dictionary *larg1, Uint32 larg2, char *larg3) {
  NdbDictionary::Undofile * lresult = (NdbDictionary::Undofile *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< NdbDictionary::Undofile > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->getUndofile(arg2,(char const *)arg3);
    lresult = new NdbDictionary::Undofile(result);
    return lresult;
  } catch (...) {
    return (NdbDictionary::Undofile *)0;
  }
}


EXPORT int _wrap_Dictionary_createHashMap__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, NdbDictionary::ObjectId *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createHashMap((NdbDictionary::HashMap const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createHashMap__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createHashMap((NdbDictionary::HashMap const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getHashMap__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->getHashMap(*arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getHashMap__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  NdbDictionary::Table *arg3 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->getHashMap(*arg2,(NdbDictionary::Table const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getDefaultHashMap__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->getDefaultHashMap(*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getDefaultHashMap__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->getDefaultHashMap(*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_initDefaultHashMap__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->initDefaultHashMap(*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_initDefaultHashMap__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::HashMap *larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::HashMap *arg2 = 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->initDefaultHashMap(*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_prepareHashMap__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->prepareHashMap((NdbDictionary::Table const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_prepareHashMap__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::Table *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->prepareHashMap((NdbDictionary::Table const &)*arg2,*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createForeignKey__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::ForeignKey *larg2, NdbDictionary::ObjectId *larg3, int larg4) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::ForeignKey *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->createForeignKey((NdbDictionary::ForeignKey const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createForeignKey__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::ForeignKey *larg2, NdbDictionary::ObjectId *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::ForeignKey *arg2 = 0 ;
  NdbDictionary::ObjectId *arg3 = (NdbDictionary::ObjectId *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->createForeignKey((NdbDictionary::ForeignKey const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_createForeignKey__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::ForeignKey *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::ForeignKey *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->createForeignKey((NdbDictionary::ForeignKey const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_getForeignKey (NdbDictionary::Dictionary *larg1, NdbDictionary::ForeignKey *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::ForeignKey *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->getForeignKey(*arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropForeignKey (NdbDictionary::Dictionary *larg1, NdbDictionary::ForeignKey *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::ForeignKey *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropForeignKey((NdbDictionary::ForeignKey const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_beginSchemaTrans (NdbDictionary::Dictionary *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->beginSchemaTrans();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_endSchemaTrans__SWIG_0 (NdbDictionary::Dictionary *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->endSchemaTrans(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_endSchemaTrans__SWIG_1 (NdbDictionary::Dictionary *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->endSchemaTrans();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_hasSchemaTrans (NdbDictionary::Dictionary *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbDictionary::Dictionary const *)arg1)->hasSchemaTrans();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Dictionary_getTable__SWIG_1 (NdbDictionary::Dictionary *larg1, char *larg2, void **larg3) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Table *)((NdbDictionary::Dictionary const *)arg1)->getTable((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT void _wrap_Dictionary_set_local_table_data_size (NdbDictionary::Dictionary *larg1, unsigned int larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_local_table_data_size(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::Index *_wrap_Dictionary_getIndexGlobal__SWIG_0 (NdbDictionary::Dictionary *larg1, char *larg2, NdbDictionary::Table *larg3) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Index *)((NdbDictionary::Dictionary const *)arg1)->getIndexGlobal((char const *)arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT NdbDictionary::Index *_wrap_Dictionary_getIndexGlobal__SWIG_1 (NdbDictionary::Dictionary *larg1, char *larg2, char *larg3) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbDictionary::Index *)((NdbDictionary::Dictionary const *)arg1)->getIndexGlobal((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_Dictionary_getTableGlobal (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbDictionary::Table *)((NdbDictionary::Dictionary const *)arg1)->getTableGlobal((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT int _wrap_Dictionary_alterTableGlobal (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->alterTableGlobal((NdbDictionary::Table const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropTableGlobal__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropTableGlobal((NdbDictionary::Table const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropTableGlobal__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->dropTableGlobal((NdbDictionary::Table const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_dropIndexGlobal (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropIndexGlobal((NdbDictionary::Index const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_removeIndexGlobal (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->removeIndexGlobal((NdbDictionary::Index const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Dictionary_removeTableGlobal (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)((NdbDictionary::Dictionary const *)arg1)->removeTableGlobal((NdbDictionary::Table const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Dictionary_invalidateDbGlobal (NdbDictionary::Dictionary *larg1, char *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->invalidateDbGlobal((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::RecordSpecification *larg3, Uint32 larg4, Uint32 larg5, Uint32 larg6) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::RecordSpecification *arg3 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  Uint32 arg6 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Table const *)arg2,(NdbDictionary::RecordSpecification const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbDictionary::Table *larg2, NdbDictionary::RecordSpecification *larg3, Uint32 larg4, Uint32 larg5) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::RecordSpecification *arg3 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Table const *)arg2,(NdbDictionary::RecordSpecification const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_2 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3, NdbDictionary::RecordSpecification *larg4, Uint32 larg5, Uint32 larg6, Uint32 larg7) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Table *arg3 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::RecordSpecification *arg4 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg5 ;
  Uint32 arg6 ;
  Uint32 arg7 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Index const *)arg2,(NdbDictionary::Table const *)arg3,(NdbDictionary::RecordSpecification const *)arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_3 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3, NdbDictionary::RecordSpecification *larg4, Uint32 larg5, Uint32 larg6) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Table *arg3 = (NdbDictionary::Table *) 0 ;
  NdbDictionary::RecordSpecification *arg4 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg5 ;
  Uint32 arg6 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Index const *)arg2,(NdbDictionary::Table const *)arg3,(NdbDictionary::RecordSpecification const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_4 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::RecordSpecification *larg3, Uint32 larg4, Uint32 larg5, Uint32 larg6) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::RecordSpecification *arg3 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  Uint32 arg6 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Index const *)arg2,(NdbDictionary::RecordSpecification const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT NdbRecord *_wrap_Dictionary_createRecord__SWIG_5 (NdbDictionary::Dictionary *larg1, NdbDictionary::Index *larg2, NdbDictionary::RecordSpecification *larg3, Uint32 larg4, Uint32 larg5) {
  NdbRecord * lresult = (NdbRecord *)0 ;
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::RecordSpecification *arg3 = (NdbDictionary::RecordSpecification *) 0 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  NdbRecord *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbRecord *)(arg1)->createRecord((NdbDictionary::Index const *)arg2,(NdbDictionary::RecordSpecification const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecord *)0;
  }
}


EXPORT void _wrap_Dictionary_releaseRecord (NdbDictionary::Dictionary *larg1, NdbRecord *larg2) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->releaseRecord(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_print__SWIG_0 (NdbDictionary::Dictionary *larg1, NdbOut *larg2, NdbDictionary::Index *larg3) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbOut *arg2 = 0 ;
  NdbDictionary::Index *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->print(*arg2,(NdbDictionary::Index const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dictionary_print__SWIG_1 (NdbDictionary::Dictionary *larg1, NdbOut *larg2, NdbDictionary::Table *larg3) {
  NdbDictionary::Dictionary *arg1 = (NdbDictionary::Dictionary *) 0 ;
  NdbOut *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->print(*arg2,(NdbDictionary::Table const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT NdbDictionary::NdbDataPrintFormat *_wrap_new_NdbDataPrintFormat () {
  NdbDictionary::NdbDataPrintFormat * lresult = (NdbDictionary::NdbDataPrintFormat *)0 ;
  NdbDictionary::NdbDataPrintFormat *result = 0 ;
  
  try {
    result = (NdbDictionary::NdbDataPrintFormat *)new NdbDictionary::NdbDataPrintFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::NdbDataPrintFormat *)0;
  }
}


EXPORT void _wrap_delete_NdbDataPrintFormat (NdbDictionary::NdbDataPrintFormat *larg1) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbDataPrintFormat_lines_terminated_by_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->lines_terminated_by = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->lines_terminated_by, (const char *)arg2);
      } else {
        arg1->lines_terminated_by = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_lines_terminated_by_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->lines_terminated_by);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_fields_terminated_by_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->fields_terminated_by = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->fields_terminated_by, (const char *)arg2);
      } else {
        arg1->fields_terminated_by = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_fields_terminated_by_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->fields_terminated_by);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_start_array_enclosure_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->start_array_enclosure = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->start_array_enclosure, (const char *)arg2);
      } else {
        arg1->start_array_enclosure = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_start_array_enclosure_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->start_array_enclosure);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_end_array_enclosure_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->end_array_enclosure = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->end_array_enclosure, (const char *)arg2);
      } else {
        arg1->end_array_enclosure = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_end_array_enclosure_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->end_array_enclosure);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_fields_enclosed_by_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->fields_enclosed_by = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->fields_enclosed_by, (const char *)arg2);
      } else {
        arg1->fields_enclosed_by = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_fields_enclosed_by_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->fields_enclosed_by);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_fields_optionally_enclosed_by_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->fields_optionally_enclosed_by = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->fields_optionally_enclosed_by, (const char *)arg2);
      } else {
        arg1->fields_optionally_enclosed_by = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_fields_optionally_enclosed_by_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->fields_optionally_enclosed_by);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_hex_prefix_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->hex_prefix = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->hex_prefix, (const char *)arg2);
      } else {
        arg1->hex_prefix = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_hex_prefix_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->hex_prefix);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_null_string_set (NdbDictionary::NdbDataPrintFormat *larg1, char *larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if (arg2) {
        arg1->null_string = (char const *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->null_string, (const char *)arg2);
      } else {
        arg1->null_string = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_NdbDataPrintFormat_null_string_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  char * lresult = (char *)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->null_string);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_NdbDataPrintFormat_hex_format_set (NdbDictionary::NdbDataPrintFormat *larg1, int larg2) {
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->hex_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbDataPrintFormat_hex_format_get (NdbDictionary::NdbDataPrintFormat *larg1) {
  int lresult = (int)0 ;
  NdbDictionary::NdbDataPrintFormat *arg1 = (NdbDictionary::NdbDataPrintFormat *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->hex_format);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Ndb *_wrap_new_Ndb__SWIG_0 (Ndb_cluster_connection *larg1, char *larg2, char *larg3) {
  Ndb * lresult = (Ndb *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Ndb *)new Ndb(arg1,(char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT Ndb *_wrap_new_Ndb__SWIG_1 (Ndb_cluster_connection *larg1, char *larg2) {
  Ndb * lresult = (Ndb *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Ndb *)new Ndb(arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT Ndb *_wrap_new_Ndb__SWIG_2 (Ndb_cluster_connection *larg1) {
  Ndb * lresult = (Ndb *)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Ndb *)new Ndb(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT void _wrap_delete_Ndb (Ndb *larg1) {
  Ndb *arg1 = (Ndb *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Ndb_cluster_connection *_wrap_Ndb_get_ndb_cluster_connection (Ndb *larg1) {
  Ndb_cluster_connection * lresult = (Ndb_cluster_connection *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Ndb_cluster_connection *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Ndb_cluster_connection *) &(arg1)->get_ndb_cluster_connection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb_cluster_connection *)0;
  }
}


EXPORT char *_wrap_Ndb_getCatalogName (Ndb *larg1) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb const *)arg1)->getCatalogName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_setCatalogName (Ndb *larg1, char *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setCatalogName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_getSchemaName (Ndb *larg1) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb const *)arg1)->getSchemaName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_setSchemaName (Ndb *larg1, char *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setSchemaName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_getNdbObjectName (Ndb *larg1) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb const *)arg1)->getNdbObjectName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_setNdbObjectName (Ndb *larg1, char *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setNdbObjectName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_getDatabaseName (Ndb *larg1) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb const *)arg1)->getDatabaseName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_setDatabaseName (Ndb *larg1, char *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setDatabaseName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Ndb_getDatabaseSchemaName (Ndb *larg1) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Ndb const *)arg1)->getDatabaseSchemaName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_setDatabaseSchemaName (Ndb *larg1, char *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setDatabaseSchemaName((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_setDatabaseAndSchemaName (Ndb *larg1, NdbDictionary::Table *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setDatabaseAndSchemaName((NdbDictionary::Table const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_init__SWIG_0 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->init(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_init__SWIG_1 (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->init();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Ndb_set_eventbuf_max_alloc (Ndb *larg1, unsigned int larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_eventbuf_max_alloc(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Ndb_get_eventbuf_max_alloc (Ndb *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->get_eventbuf_max_alloc();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_Ndb_set_eventbuffer_free_percent (Ndb *larg1, unsigned int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_eventbuffer_free_percent(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT unsigned int _wrap_Ndb_get_eventbuffer_free_percent (Ndb *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->get_eventbuffer_free_percent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Ndb_get_event_buffer_memory_usage (Ndb *larg1, Ndb::EventBufferMemoryUsage *larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  Ndb::EventBufferMemoryUsage *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->get_event_buffer_memory_usage(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_setEventBufferQueueEmptyEpoch (Ndb *larg1, int larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setEventBufferQueueEmptyEpoch(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Ndb_waitUntilReady__SWIG_0 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->waitUntilReady(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_waitUntilReady__SWIG_1 (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->waitUntilReady();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Dictionary *_wrap_Ndb_getDictionary (Ndb *larg1) {
  NdbDictionary::Dictionary * lresult = (NdbDictionary::Dictionary *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Dictionary *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Dictionary *)((Ndb const *)arg1)->getDictionary();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Dictionary *)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_createEventOperation (Ndb *larg1, char *larg2) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbEventOperation *)(arg1)->createEventOperation((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT int _wrap_Ndb_dropEventOperation (Ndb *larg1, NdbEventOperation *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbEventOperation *arg2 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->dropEventOperation(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollEvents2__SWIG_0 (Ndb *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  Uint64 *arg3 = (Uint64 *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->pollEvents2(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollEvents2__SWIG_1 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->pollEvents2(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_isExpectingHigherQueuedEpochs (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->isExpectingHigherQueuedEpochs();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollEvents__SWIG_0 (Ndb *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  Uint64 *arg3 = (Uint64 *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->pollEvents(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollEvents__SWIG_1 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->pollEvents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_nextEvent2 (Ndb *larg1) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbEventOperation *)(arg1)->nextEvent2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_nextEvent (Ndb *larg1) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbEventOperation *)(arg1)->nextEvent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT int _wrap_Ndb_isConsistent (Ndb *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->isConsistent(*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_isConsistentGCI (Ndb *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (bool)(arg1)->isConsistentGCI(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_getGCIEventOperations (Ndb *larg1, Uint32 *larg2, Uint32 *larg3) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbEventOperation *)(arg1)->getGCIEventOperations(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_getNextEventOpInEpoch2 (Ndb *larg1, Uint32 *larg2, Uint32 *larg3) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbEventOperation *)(arg1)->getNextEventOpInEpoch2(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_getNextEventOpInEpoch3 (Ndb *larg1, Uint32 *larg2, Uint32 *larg3, Uint32 *larg4) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 *arg3 = (Uint32 *) 0 ;
  Uint32 *arg4 = (Uint32 *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbEventOperation *)(arg1)->getNextEventOpInEpoch3(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT Uint64 *_wrap_Ndb_getHighestQueuedEpoch (Ndb *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)(arg1)->getHighestQueuedEpoch();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT int _wrap_Ndb_flushIncompleteEvents (Ndb *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (int)(arg1)->flushIncompleteEvents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_getEventOperation__SWIG_0 (Ndb *larg1, NdbEventOperation *larg2) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbEventOperation *arg2 = (NdbEventOperation *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbEventOperation *)(arg1)->getEventOperation(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT NdbEventOperation *_wrap_Ndb_getEventOperation__SWIG_1 (Ndb *larg1) {
  NdbEventOperation * lresult = (NdbEventOperation *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbEventOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbEventOperation *)(arg1)->getEventOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation *)0;
  }
}


EXPORT Uint64 *_wrap_Ndb_getLatestGCI (Ndb *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)(arg1)->getLatestGCI();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT void _wrap_Ndb_forceGCP (Ndb *larg1) {
  Ndb *arg1 = (Ndb *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->forceGCP();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_setReportThreshEventGCISlip (Ndb *larg1, unsigned int larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setReportThreshEventGCISlip(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_setReportThreshEventFreeMem (Ndb *larg1, unsigned int larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setReportThreshEventFreeMem(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_0 (Ndb *larg1, NdbDictionary::Table *larg2, char *larg3, Uint32 larg4) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_1 (Ndb *larg1, NdbDictionary::Table *larg2, char *larg3) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_2 (Ndb *larg1, NdbDictionary::Table *larg2) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_3 (Ndb *larg1) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_4 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3, void *larg4, Uint32 larg5) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_5 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3, void *larg4) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  void *arg4 = (void *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_6 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_7 (Ndb *larg1, NdbRecord *larg2, char *larg3, void *larg4, Uint32 larg5) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbRecord const *)arg2,(char const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_8 (Ndb *larg1, NdbDictionary::Table *larg2, Uint32 larg3) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint32 arg3 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction((NdbDictionary::Table const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_startTransaction__SWIG_9 (Ndb *larg1, Uint32 larg2, Uint32 larg3) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbTransaction *)(arg1)->startTransaction(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT int _wrap_Ndb_computeHash__SWIG_0 (Uint32 *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3, void *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  Uint32 *arg1 = (Uint32 *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)Ndb::computeHash(arg1,(NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_computeHash__SWIG_1 (Uint32 *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3, void *larg4) {
  int lresult = (int)0 ;
  Uint32 *arg1 = (Uint32 *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)Ndb::computeHash(arg1,(NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_computeHash__SWIG_2 (Uint32 *larg1, NdbDictionary::Table *larg2, Ndb::Key_part_ptr *larg3) {
  int lresult = (int)0 ;
  Uint32 *arg1 = (Uint32 *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::Key_part_ptr *arg3 = (Ndb::Key_part_ptr *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)Ndb::computeHash(arg1,(NdbDictionary::Table const *)arg2,(Ndb::Key_part_ptr const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_computeHash__SWIG_3 (Uint32 *larg1, NdbRecord *larg2, char *larg3, void *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  Uint32 *arg1 = (Uint32 *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)Ndb::computeHash(arg1,(NdbRecord const *)arg2,(char const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Ndb_closeTransaction (Ndb *larg1, NdbTransaction *larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->closeTransaction(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Ndb_pollNdb__SWIG_0 (Ndb *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->pollNdb(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollNdb__SWIG_1 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->pollNdb(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_pollNdb__SWIG_2 (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->pollNdb();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Ndb_sendPreparedTransactions__SWIG_0 (Ndb *larg1, int larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->sendPreparedTransactions(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Ndb_sendPreparedTransactions__SWIG_1 (Ndb *larg1) {
  Ndb *arg1 = (Ndb *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->sendPreparedTransactions();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Ndb_sendPollNdb__SWIG_0 (Ndb *larg1, int larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->sendPollNdb(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_sendPollNdb__SWIG_1 (Ndb *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->sendPollNdb(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_sendPollNdb__SWIG_2 (Ndb *larg1, int larg2) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->sendPollNdb(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_sendPollNdb__SWIG_3 (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->sendPollNdb();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbError *_wrap_Ndb_getNdbError__SWIG_0 (Ndb *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((Ndb const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT NdbError *_wrap_Ndb_getNdbError__SWIG_1 (Ndb *larg1, int larg2) {
  NdbError * lresult = (NdbError *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int arg2 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbError *) &(arg1)->getNdbError(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT char *_wrap_Ndb_getNdbErrorDetail (Ndb *larg1, NdbError *larg2, char *larg3, Uint32 larg4) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbError *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (char *)((Ndb const *)arg1)->getNdbErrorDetail((NdbError const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Ndb_getNodeId (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->getNodeId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_usingFullyQualifiedNames (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->usingFullyQualifiedNames();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_initAutoIncrement (Ndb *larg1) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->initAutoIncrement();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_0 (Ndb *larg1, char *larg2, Uint64 *larg3, Uint32 larg4, Uint64 *larg5, Uint64 *larg6) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  Uint64 arg5 ;
  Uint64 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  try {
    result = (int)(arg1)->getAutoIncrementValue((char const *)arg2,*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_1 (Ndb *larg1, char *larg2, Uint64 *larg3, Uint32 larg4, Uint64 *larg5) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  Uint64 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  try {
    result = (int)(arg1)->getAutoIncrementValue((char const *)arg2,*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_2 (Ndb *larg1, char *larg2, Uint64 *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->getAutoIncrementValue((char const *)arg2,*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_3 (Ndb *larg1, NdbDictionary::Table *larg2, Uint64 *larg3, Uint32 larg4, Uint64 *larg5, Uint64 *larg6) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  Uint64 arg5 ;
  Uint64 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_4 (Ndb *larg1, NdbDictionary::Table *larg2, Uint64 *larg3, Uint32 larg4, Uint64 *larg5) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  Uint64 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_5 (Ndb *larg1, NdbDictionary::Table *larg2, Uint64 *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint64 *arg3 = 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_6 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::TupleIdRange *larg3, Uint64 *larg4, Uint32 larg5, Uint64 *larg6, Uint64 *larg7) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::TupleIdRange *arg3 = 0 ;
  Uint64 *arg4 = 0 ;
  Uint32 arg5 ;
  Uint64 arg6 ;
  Uint64 arg7 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_7 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::TupleIdRange *larg3, Uint64 *larg4, Uint32 larg5, Uint64 *larg6) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::TupleIdRange *arg3 = 0 ;
  Uint64 *arg4 = 0 ;
  Uint32 arg5 ;
  Uint64 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_getAutoIncrementValue__SWIG_8 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::TupleIdRange *larg3, Uint64 *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::TupleIdRange *arg3 = 0 ;
  Uint64 *arg4 = 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->getAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_readAutoIncrementValue__SWIG_0 (Ndb *larg1, char *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->readAutoIncrementValue((char const *)arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_readAutoIncrementValue__SWIG_1 (Ndb *larg1, NdbDictionary::Table *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint64 *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->readAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_readAutoIncrementValue__SWIG_2 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::TupleIdRange *larg3, Uint64 *larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::TupleIdRange *arg3 = 0 ;
  Uint64 *arg4 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->readAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_setAutoIncrementValue__SWIG_0 (Ndb *larg1, char *larg2, Uint64 *larg3, int larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)(arg1)->setAutoIncrementValue((char const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_setAutoIncrementValue__SWIG_1 (Ndb *larg1, NdbDictionary::Table *larg2, Uint64 *larg3, int larg4) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Uint64 arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)(arg1)->setAutoIncrementValue((NdbDictionary::Table const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_setAutoIncrementValue__SWIG_2 (Ndb *larg1, NdbDictionary::Table *larg2, Ndb::TupleIdRange *larg3, Uint64 *larg4, int larg5) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  Ndb::TupleIdRange *arg3 = 0 ;
  Uint64 arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  try {
    result = (int)(arg1)->setAutoIncrementValue((NdbDictionary::Table const *)arg2,*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Ndb_checkUpdateAutoIncrementValue (Ndb *larg1, Ndb::TupleIdRange *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Ndb::TupleIdRange *arg2 = 0 ;
  Uint64 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)(arg1)->checkUpdateAutoIncrementValue(*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbTransaction *_wrap_Ndb_hupp (Ndb *larg1, NdbTransaction *larg2) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbTransaction *)(arg1)->hupp(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT Uint32 _wrap_Ndb_getReference (Ndb *larg1) {
  Uint32 lresult = (Uint32)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((Ndb const *)arg1)->getReference();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Ndb::Free_list_usage *_wrap_Ndb_get_free_list_usage (Ndb *larg1, Ndb::Free_list_usage *larg2) {
  Ndb::Free_list_usage * lresult = (Ndb::Free_list_usage *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Ndb::Free_list_usage *arg2 = (Ndb::Free_list_usage *) 0 ;
  Ndb::Free_list_usage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Ndb::Free_list_usage *)(arg1)->get_free_list_usage(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb::Free_list_usage *)0;
  }
}


EXPORT Uint32 _wrap_Ndb_getMinDbNodeVersion (Ndb *larg1) {
  Uint32 lresult = (Uint32)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((Ndb const *)arg1)->getMinDbNodeVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_Ndb_setCustomData (Ndb *larg1, void *larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCustomData(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_Ndb_getCustomData (Ndb *larg1) {
  void * lresult = (void *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((Ndb const *)arg1)->getCustomData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_Ndb_setCustomData64 (Ndb *larg1, Uint64 *larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setCustomData64(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint64 *_wrap_Ndb_getCustomData64 (Ndb *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((Ndb const *)arg1)->getCustomData64();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint64 *_wrap_Ndb_getNextTransactionId (Ndb *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((Ndb const *)arg1)->getNextTransactionId();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint64 *_wrap_Ndb_getClientStat (Ndb *larg1, Uint32 larg2) {
  Uint64 * lresult = (Uint64 *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 arg2 ;
  Uint64 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Uint64)((Ndb const *)arg1)->getClientStat(arg2);
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT char *_wrap_Ndb_getClientStatName (Ndb *larg1, Uint32 larg2) {
  char * lresult = (char *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)((Ndb const *)arg1)->getClientStatName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_compare_ndbrecord (NdbReceiver *larg1, NdbReceiver *larg2, NdbRecord *larg3, NdbRecord *larg4, int larg5, int larg6) {
  int lresult = (int)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver *arg2 = (NdbReceiver *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (int)compare_ndbrecord((NdbReceiver const *)arg1,(NdbReceiver const *)arg2,(NdbRecord const *)arg3,(NdbRecord const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbReceiver *_wrap_new_NdbReceiver (Ndb *larg1) {
  NdbReceiver * lresult = (NdbReceiver *)0 ;
  Ndb *arg1 = (Ndb *) 0 ;
  NdbReceiver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbReceiver *)new NdbReceiver(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbReceiver *)0;
  }
}


EXPORT int _wrap_NdbReceiver_init (NdbReceiver *larg1, NdbReceiver::ReceiverType larg2, void *larg3) {
  int lresult = (int)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver::ReceiverType arg2 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->init(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbReceiver_release (NdbReceiver *larg1) {
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->release();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_NdbReceiver (NdbReceiver *larg1) {
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_NdbReceiver_getId (NdbReceiver *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbReceiver const *)arg1)->getId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT NdbReceiver::ReceiverType _wrap_NdbReceiver_getType (NdbReceiver *larg1) {
  NdbReceiver::ReceiverType lresult = (NdbReceiver::ReceiverType)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver::ReceiverType result;
  
  arg1 = larg1;
  try {
    result = (NdbReceiver::ReceiverType)((NdbReceiver const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbReceiver::ReceiverType)0;
  }
}


EXPORT NdbTransaction *_wrap_NdbReceiver_getTransaction (NdbReceiver *larg1, NdbReceiver::ReceiverType larg2) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver::ReceiverType arg2 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbTransaction *)((NdbReceiver const *)arg1)->getTransaction(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT void *_wrap_NdbReceiver_getOwner (NdbReceiver *larg1) {
  void * lresult = (void *)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((NdbReceiver const *)arg1)->getOwner();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT int _wrap_NdbReceiver_checkMagicNumber (NdbReceiver *larg1) {
  int lresult = (int)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbReceiver const *)arg1)->checkMagicNumber();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 _wrap_NdbReceiver_getMagicNumber () {
  Uint32 lresult = (Uint32)0 ;
  Uint32 result;
  
  try {
    result = (Uint32)NdbReceiver::getMagicNumber();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint32 _wrap_NdbReceiver_getMagicNumberFromObject (NdbReceiver *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbReceiver const *)arg1)->getMagicNumberFromObject();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_NdbReceiver_next__SWIG_0 (NdbReceiver *larg1, NdbReceiver *larg2) {
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver *arg2 = (NdbReceiver *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->next(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbReceiver *_wrap_NdbReceiver_next__SWIG_1 (NdbReceiver *larg1) {
  NdbReceiver * lresult = (NdbReceiver *)0 ;
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbReceiver *)(arg1)->next();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbReceiver *)0;
  }
}


EXPORT void _wrap_NdbReceiver_setErrorCode (NdbReceiver *larg1, int larg2) {
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setErrorCode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbReceiverBuffer *_wrap_NdbReceiver_initReceiveBuffer (Uint32 *larg1, Uint32 larg2, Uint32 larg3) {
  NdbReceiverBuffer * lresult = (NdbReceiverBuffer *)0 ;
  Uint32 *arg1 = (Uint32 *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  NdbReceiverBuffer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbReceiverBuffer *)NdbReceiver::initReceiveBuffer(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbReceiverBuffer *)0;
  }
}


EXPORT void _wrap_NdbReceiver_prepareReceive (NdbReceiver *larg1, NdbReceiverBuffer *larg2) {
  NdbReceiver *arg1 = (NdbReceiver *) 0 ;
  NdbReceiverBuffer *arg2 = (NdbReceiverBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->prepareReceive(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbOperation_insertTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->insertTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_updateTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->updateTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_writeTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->writeTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_deleteTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->deleteTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_readTuple__SWIG_0 (NdbOperation *larg1, NdbOperation::LockMode larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuple(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_readTuple__SWIG_1 (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_readTupleExclusive (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTupleExclusive();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_simpleRead (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->simpleRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_dirtyRead (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->dirtyRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_committedRead (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->committedRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_dirtyUpdate (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->dirtyUpdate();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_dirtyWrite (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->dirtyWrite();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpretedUpdateTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpretedUpdateTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpretedDeleteTuple (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpretedDeleteTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_0 (NdbOperation *larg1, char *larg2, char *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->equal((char const *)arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_1 (NdbOperation *larg1, char *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_2 (NdbOperation *larg1, char *larg2, Int32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Int32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_3 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_4 (NdbOperation *larg1, char *larg2, Int64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Int64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->equal((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_5 (NdbOperation *larg1, char *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->equal((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_6 (NdbOperation *larg1, Uint32 larg2, char *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->equal(arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_7 (NdbOperation *larg1, Uint32 larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal(arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_8 (NdbOperation *larg1, Uint32 larg2, Int32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Int32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_9 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->equal(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_10 (NdbOperation *larg1, Uint32 larg2, Int64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Int64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->equal(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_equal__SWIG_11 (NdbOperation *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->equal(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_0 (NdbOperation *larg1, char *larg2, char *larg3) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_1 (NdbOperation *larg1, char *larg2) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_2 (NdbOperation *larg1, Uint32 larg2, char *larg3) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbRecAttr *)(arg1)->getValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_3 (NdbOperation *larg1, Uint32 larg2) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbRecAttr *)(arg1)->getValue(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_4 (NdbOperation *larg1, NdbDictionary::Column *larg2, char *larg3) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbDictionary::Column *arg2 = (NdbDictionary::Column *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((NdbDictionary::Column const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getValue__SWIG_5 (NdbOperation *larg1, NdbDictionary::Column *larg2) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbDictionary::Column *arg2 = (NdbDictionary::Column *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((NdbDictionary::Column const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_0 (NdbOperation *larg1, char *larg2, char *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_1 (NdbOperation *larg1, char *larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_2 (NdbOperation *larg1, char *larg2, Int32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Int32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_3 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_4 (NdbOperation *larg1, char *larg2, Int64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Int64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_5 (NdbOperation *larg1, char *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_6 (NdbOperation *larg1, char *larg2, float larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_7 (NdbOperation *larg1, char *larg2, double larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setAnyValue (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setAnyValue(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setOptimize (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setOptimize(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_8 (NdbOperation *larg1, Uint32 larg2, char *larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setValue(arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_9 (NdbOperation *larg1, Uint32 larg2, char *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue(arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_10 (NdbOperation *larg1, Uint32 larg2, Int32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Int32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_11 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_12 (NdbOperation *larg1, Uint32 larg2, Int64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Int64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_13 (NdbOperation *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_14 (NdbOperation *larg1, Uint32 larg2, float larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  float arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_setValue__SWIG_15 (NdbOperation *larg1, Uint32 larg2, double larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  double arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbBlob *_wrap_NdbOperation_getBlobHandle__SWIG_0 (NdbOperation *larg1, char *larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getBlobHandle((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbOperation_getBlobHandle__SWIG_1 (NdbOperation *larg1, Uint32 larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getBlobHandle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbOperation_getBlobHandle__SWIG_2 (NdbOperation *larg1, char *larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)((NdbOperation const *)arg1)->getBlobHandle((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbOperation_getBlobHandle__SWIG_3 (NdbOperation *larg1, Uint32 larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)((NdbOperation const *)arg1)->getBlobHandle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT int _wrap_NdbOperation_incValue__SWIG_0 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->incValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_incValue__SWIG_1 (NdbOperation *larg1, char *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->incValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_incValue__SWIG_2 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->incValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_incValue__SWIG_3 (NdbOperation *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->incValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_subValue__SWIG_0 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->subValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_subValue__SWIG_1 (NdbOperation *larg1, char *larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->subValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_subValue__SWIG_2 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->subValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_subValue__SWIG_3 (NdbOperation *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->subValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_def_label (NdbOperation *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->def_label(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_add_reg (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->add_reg(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_sub_reg (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->sub_reg(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_load_const_u32 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->load_const_u32(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_load_const_u64 (NdbOperation *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->load_const_u64(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_load_const_null (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->load_const_null(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_read_attr__SWIG_0 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->read_attr((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_write_attr__SWIG_0 (NdbOperation *larg1, char *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->write_attr((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_read_attr__SWIG_1 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->read_attr(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_write_attr__SWIG_1 (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->write_attr(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_ge (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_ge(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_gt (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_gt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_le (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_le(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_lt (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_lt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_eq (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_eq(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_ne (NdbOperation *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_ne(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_ne_null (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_ne_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_eq_null (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_eq_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_label (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->branch_label(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_eq_null (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_col_eq_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_ne_null (NdbOperation *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_col_ne_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_eq (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_eq(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_ne (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_ne(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_lt (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_lt(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_le (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_le(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_gt (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_gt(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_ge (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_ge(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_like (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_like(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_notlike (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_notlike(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_and_mask_eq_mask (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_and_mask_eq_mask(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_and_mask_ne_mask (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_and_mask_ne_mask(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_and_mask_eq_zero (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_and_mask_eq_zero(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_branch_col_and_mask_ne_zero (NdbOperation *larg1, Uint32 larg2, void *larg3, Uint32 larg4, int larg5, Uint32 larg6) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  void *arg3 = (void *) 0 ;
  Uint32 arg4 ;
  bool arg5 ;
  Uint32 arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (int)(arg1)->branch_col_and_mask_ne_zero(arg2,(void const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpret_exit_ok (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_ok();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpret_exit_nok__SWIG_0 (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->interpret_exit_nok(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpret_exit_nok__SWIG_1 (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_nok();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_interpret_exit_last_row (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_last_row();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_def_subroutine (NdbOperation *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->def_subroutine(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_call_sub (NdbOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->call_sub(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_ret_sub (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->ret_sub();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbError *_wrap_NdbOperation_getNdbError (NdbOperation *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbOperation const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT int _wrap_NdbOperation_getNdbErrorLine__SWIG_0 (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->getNdbErrorLine();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbOperation_getNdbErrorLine__SWIG_1 (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbOperation const *)arg1)->getNdbErrorLine();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_NdbOperation_getTableName (NdbOperation *larg1) {
  char * lresult = (char *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbOperation const *)arg1)->getTableName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_NdbOperation_getTable (NdbOperation *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)((NdbOperation const *)arg1)->getTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbOperation::Type _wrap_NdbOperation_getType (NdbOperation *larg1) {
  NdbOperation::Type lresult = (NdbOperation::Type)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation::Type result;
  
  arg1 = larg1;
  try {
    result = (NdbOperation::Type)((NdbOperation const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation::Type)0;
  }
}


EXPORT NdbOperation::LockMode _wrap_NdbOperation_getLockMode (NdbOperation *larg1) {
  NdbOperation::LockMode lresult = (NdbOperation::LockMode)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation::LockMode result;
  
  arg1 = larg1;
  try {
    result = (NdbOperation::LockMode)((NdbOperation const *)arg1)->getLockMode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation::LockMode)0;
  }
}


EXPORT NdbOperation::AbortOption _wrap_NdbOperation_getAbortOption (NdbOperation *larg1) {
  NdbOperation::AbortOption lresult = (NdbOperation::AbortOption)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation::AbortOption result;
  
  arg1 = larg1;
  try {
    result = (NdbOperation::AbortOption)((NdbOperation const *)arg1)->getAbortOption();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation::AbortOption)0;
  }
}


EXPORT int _wrap_NdbOperation_setAbortOption (NdbOperation *larg1, NdbOperation::AbortOption larg2) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation::AbortOption arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setAbortOption(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbTransaction *_wrap_NdbOperation_getNdbTransaction (NdbOperation *larg1) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbTransaction *)((NdbOperation const *)arg1)->getNdbTransaction();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT void _wrap_NdbOperation_setPartitionId (NdbOperation *larg1, Uint32 larg2) {
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPartitionId(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Uint32 _wrap_NdbOperation_getPartitionId (NdbOperation *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbOperation const *)arg1)->getPartitionId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT NdbLockHandle *_wrap_NdbOperation_getLockHandle__SWIG_0 (NdbOperation *larg1) {
  NdbLockHandle * lresult = (NdbLockHandle *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbLockHandle *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbLockHandle *)((NdbOperation const *)arg1)->getLockHandle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbLockHandle *)0;
  }
}


EXPORT NdbLockHandle *_wrap_NdbOperation_getLockHandle__SWIG_1 (NdbOperation *larg1) {
  NdbLockHandle * lresult = (NdbLockHandle *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbLockHandle *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbLockHandle *)(arg1)->getLockHandle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbLockHandle *)0;
  }
}


EXPORT void _wrap_NdbOperation_set_disable_fk (NdbOperation *larg1) {
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_disable_fk();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbOperation_setNoWait (NdbOperation *larg1) {
  int lresult = (int)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->setNoWait();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbOperation *_wrap_NdbOperation_next (NdbOperation *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbOperation const *)arg1)->next();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbOperation_getFirstRecAttr (NdbOperation *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbOperation const *)arg1)->getFirstRecAttr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT void *_wrap_NdbOperation_getCustomData (NdbOperation *larg1) {
  void * lresult = (void *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((NdbOperation const *)arg1)->getCustomData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_NdbOperation_setCustomData (NdbOperation *larg1, void *larg2) {
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCustomData(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_0 (NdbScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_1 (NdbScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_2 (NdbScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_3 (NdbScanOperation *larg1, NdbOperation::LockMode larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuples(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_4 (NdbScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTuples();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuples__SWIG_5 (NdbScanOperation *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuples(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuplesExclusive__SWIG_0 (NdbScanOperation *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuplesExclusive(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_readTuplesExclusive__SWIG_1 (NdbScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTuplesExclusive();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbBlob *_wrap_NdbScanOperation_getBlobHandle__SWIG_0 (NdbScanOperation *larg1, char *larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getBlobHandle((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbScanOperation_getBlobHandle__SWIG_1 (NdbScanOperation *larg1, Uint32 larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  Uint32 arg2 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getBlobHandle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT int _wrap_NdbScanOperation_setInterpretedCode (NdbScanOperation *larg1, NdbInterpretedCode *larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbInterpretedCode *arg2 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->setInterpretedCode((NdbInterpretedCode const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_nextResult__SWIG_0 (NdbScanOperation *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = (int)(arg1)->nextResult(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_nextResult__SWIG_1 (NdbScanOperation *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (int)(arg1)->nextResult(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_nextResult__SWIG_2 (NdbScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->nextResult();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_nextResult__SWIG_3 (NdbScanOperation *larg1, char **larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  char **arg2 = (char **) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)(arg1)->nextResult((char const **)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_nextResultCopyOut (NdbScanOperation *larg1, char *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (int)(arg1)->nextResultCopyOut(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbScanOperation_close__SWIG_0 (NdbScanOperation *larg1, int larg2, int larg3) {
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->close(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbScanOperation_close__SWIG_1 (NdbScanOperation *larg1, int larg2) {
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->close(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbScanOperation_close__SWIG_2 (NdbScanOperation *larg1) {
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->close();
    
  } catch (...) {
    
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_0 (NdbScanOperation *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_1 (NdbScanOperation *larg1, NdbTransaction *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_0 (NdbScanOperation *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_1 (NdbScanOperation *larg1, NdbTransaction *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT int _wrap_NdbScanOperation_deleteCurrentTuple__SWIG_0 (NdbScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->deleteCurrentTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanOperation_deleteCurrentTuple__SWIG_1 (NdbScanOperation *larg1, NdbTransaction *larg2) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->deleteCurrentTuple(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_2 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6, Uint32 larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg7 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_3 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_4 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_5 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2,(NdbRecord const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_lockCurrentTuple__SWIG_6 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOperation *)(arg1)->lockCurrentTuple(arg2,(NdbRecord const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_2 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6, Uint32 larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg7 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple(arg2,(NdbRecord const *)arg3,(char const *)arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_3 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple(arg2,(NdbRecord const *)arg3,(char const *)arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_4 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple(arg2,(NdbRecord const *)arg3,(char const *)arg4,(unsigned char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_updateCurrentTuple__SWIG_5 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->updateCurrentTuple(arg2,(NdbRecord const *)arg3,(char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_deleteCurrentTuple__SWIG_2 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6, Uint32 larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg7 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->deleteCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_deleteCurrentTuple__SWIG_3 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5, NdbOperation::OperationOptions *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg6 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->deleteCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbOperation::OperationOptions const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_deleteCurrentTuple__SWIG_4 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4, unsigned char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->deleteCurrentTuple(arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_deleteCurrentTuple__SWIG_5 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3, char *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  char *arg4 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->deleteCurrentTuple(arg2,(NdbRecord const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanOperation_deleteCurrentTuple__SWIG_6 (NdbScanOperation *larg1, NdbTransaction *larg2, NdbRecord *larg3) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *arg2 = (NdbTransaction *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOperation *)(arg1)->deleteCurrentTuple(arg2,(NdbRecord const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbTransaction *_wrap_NdbScanOperation_getNdbTransaction (NdbScanOperation *larg1) {
  NdbTransaction * lresult = (NdbTransaction *)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  NdbTransaction *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbTransaction *)((NdbScanOperation const *)arg1)->getNdbTransaction();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction *)0;
  }
}


EXPORT int _wrap_NdbScanOperation_getPruned (NdbScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbScanOperation *arg1 = (NdbScanOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbScanOperation const *)arg1)->getPruned();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_0 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_1 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_2 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_3 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuples(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_4 (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTuples();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_5 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, int larg5, int larg6, int larg7, int larg8, int larg9) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  arg8 = (bool)larg8;
  arg9 = (bool)larg9;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_6 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, int larg5, int larg6, int larg7, int larg8) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  arg8 = (bool)larg8;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_7 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, int larg5, int larg6, int larg7) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_8 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, int larg5, int larg6) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_readTuples__SWIG_9 (NdbIndexScanOperation *larg1, NdbOperation::LockMode larg2, Uint32 larg3, Uint32 larg4, int larg5) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (int)(arg1)->readTuples(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_0 (NdbIndexScanOperation *larg1, char *larg2, int larg3, void *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->setBound((char const *)arg2,arg3,(void const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_1 (NdbIndexScanOperation *larg1, char *larg2, int larg3, void *larg4) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setBound((char const *)arg2,arg3,(void const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_2 (NdbIndexScanOperation *larg1, Uint32 larg2, int larg3, void *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  Uint32 arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->setBound(arg2,arg3,(void const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_3 (NdbIndexScanOperation *larg1, Uint32 larg2, int larg3, void *larg4) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  Uint32 arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setBound(arg2,arg3,(void const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_end_of_bound__SWIG_0 (NdbIndexScanOperation *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->end_of_bound(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_end_of_bound__SWIG_1 (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->end_of_bound();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_get_range_no (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->get_range_no();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_4 (NdbIndexScanOperation *larg1, NdbRecord *larg2, NdbIndexScanOperation::IndexBound *larg3, Ndb::PartitionSpec *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbIndexScanOperation::IndexBound *arg3 = 0 ;
  Ndb::PartitionSpec *arg4 = (Ndb::PartitionSpec *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->setBound((NdbRecord const *)arg2,(NdbIndexScanOperation::IndexBound const &)*arg3,(Ndb::PartitionSpec const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_5 (NdbIndexScanOperation *larg1, NdbRecord *larg2, NdbIndexScanOperation::IndexBound *larg3, Ndb::PartitionSpec *larg4) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbIndexScanOperation::IndexBound *arg3 = 0 ;
  Ndb::PartitionSpec *arg4 = (Ndb::PartitionSpec *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->setBound((NdbRecord const *)arg2,(NdbIndexScanOperation::IndexBound const &)*arg3,(Ndb::PartitionSpec const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_setBound__SWIG_6 (NdbIndexScanOperation *larg1, NdbRecord *larg2, NdbIndexScanOperation::IndexBound *larg3) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbIndexScanOperation::IndexBound *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setBound((NdbRecord const *)arg2,(NdbIndexScanOperation::IndexBound const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_getCurrentKeySize (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->getCurrentKeySize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_getSorted (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbIndexScanOperation const *)arg1)->getSorted();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexScanOperation_getDescending (NdbIndexScanOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexScanOperation *arg1 = (NdbIndexScanOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbIndexScanOperation const *)arg1)->getDescending();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Ndb *_wrap_NdbTransaction_getNdb (NdbTransaction *larg1) {
  Ndb * lresult = (Ndb *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Ndb *)(arg1)->getNdb();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getNdbOperation__SWIG_0 (NdbTransaction *larg1, char *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)(arg1)->getNdbOperation((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getNdbOperation__SWIG_1 (NdbTransaction *larg1, NdbDictionary::Table *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)(arg1)->getNdbOperation((NdbDictionary::Table const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_getNdbScanOperation__SWIG_0 (NdbTransaction *larg1, char *larg2) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbScanOperation *)(arg1)->getNdbScanOperation((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_getNdbScanOperation__SWIG_1 (NdbTransaction *larg1, NdbDictionary::Table *larg2) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Table *arg2 = (NdbDictionary::Table *) 0 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbScanOperation *)(arg1)->getNdbScanOperation((NdbDictionary::Table const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_getNdbIndexScanOperation__SWIG_0 (NdbTransaction *larg1, char *larg2, char *larg3) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbIndexScanOperation *)(arg1)->getNdbIndexScanOperation((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_getNdbIndexScanOperation__SWIG_1 (NdbTransaction *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Table *arg3 = (NdbDictionary::Table *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbIndexScanOperation *)(arg1)->getNdbIndexScanOperation((NdbDictionary::Index const *)arg2,(NdbDictionary::Table const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_getNdbIndexScanOperation__SWIG_2 (NdbTransaction *larg1, NdbDictionary::Index *larg2) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbIndexScanOperation *)(arg1)->getNdbIndexScanOperation((NdbDictionary::Index const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexOperation *_wrap_NdbTransaction_getNdbIndexOperation__SWIG_0 (NdbTransaction *larg1, char *larg2, char *larg3) {
  NdbIndexOperation * lresult = (NdbIndexOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbIndexOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbIndexOperation *)(arg1)->getNdbIndexOperation((char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexOperation *)0;
  }
}


EXPORT NdbIndexOperation *_wrap_NdbTransaction_getNdbIndexOperation__SWIG_1 (NdbTransaction *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  NdbIndexOperation * lresult = (NdbIndexOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbDictionary::Table *arg3 = (NdbDictionary::Table *) 0 ;
  NdbIndexOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbIndexOperation *)(arg1)->getNdbIndexOperation((NdbDictionary::Index const *)arg2,(NdbDictionary::Table const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexOperation *)0;
  }
}


EXPORT NdbIndexOperation *_wrap_NdbTransaction_getNdbIndexOperation__SWIG_2 (NdbTransaction *larg1, NdbDictionary::Index *larg2) {
  NdbIndexOperation * lresult = (NdbIndexOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbIndexOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbIndexOperation *)(arg1)->getNdbIndexOperation((NdbDictionary::Index const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexOperation *)0;
  }
}


EXPORT void _wrap_NdbTransaction_setSchemaObjOwnerChecks (NdbTransaction *larg1, int larg2) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setSchemaObjOwnerChecks(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_0 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbOperation::AbortOption larg3, int larg4) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbOperation::AbortOption arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->execute(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_1 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbOperation::AbortOption larg3) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbOperation::AbortOption arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->execute(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_2 (NdbTransaction *larg1, NdbTransaction::ExecType larg2) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->execute(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_3 (NdbTransaction *larg1, ::ExecType larg2, ::AbortOption larg3, int larg4) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  ::AbortOption arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->execute(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_4 (NdbTransaction *larg1, ::ExecType larg2, ::AbortOption larg3) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  ::AbortOption arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->execute(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_execute__SWIG_5 (NdbTransaction *larg1, ::ExecType larg2) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->execute(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynchPrepare__SWIG_0 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbAsynchCallback larg3, void *larg4, NdbOperation::AbortOption larg5) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  NdbOperation::AbortOption arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->executeAsynchPrepare(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynchPrepare__SWIG_1 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbAsynchCallback larg3, void *larg4) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->executeAsynchPrepare(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynchPrepare__SWIG_2 (NdbTransaction *larg1, ::ExecType larg2, NdbAsynchCallback larg3, void *larg4, ::AbortOption larg5) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  ::AbortOption arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->executeAsynchPrepare(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynchPrepare__SWIG_3 (NdbTransaction *larg1, ::ExecType larg2, NdbAsynchCallback larg3, void *larg4) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->executeAsynchPrepare(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_0 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbAsynchCallback larg3, void *larg4, NdbOperation::AbortOption larg5, int larg6) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  NdbOperation::AbortOption arg5 ;
  int arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_1 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbAsynchCallback larg3, void *larg4, NdbOperation::AbortOption larg5) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  NdbOperation::AbortOption arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_2 (NdbTransaction *larg1, NdbTransaction::ExecType larg2, NdbAsynchCallback larg3, void *larg4) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_3 (NdbTransaction *larg1, ::ExecType larg2, NdbAsynchCallback larg3, void *larg4, ::AbortOption larg5, int larg6) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  ::AbortOption arg5 ;
  int arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_4 (NdbTransaction *larg1, ::ExecType larg2, NdbAsynchCallback larg3, void *larg4, ::AbortOption larg5) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  ::AbortOption arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_executeAsynch__SWIG_5 (NdbTransaction *larg1, ::ExecType larg2, NdbAsynchCallback larg3, void *larg4) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  ::ExecType arg2 ;
  NdbAsynchCallback arg3 = (NdbAsynchCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->executeAsynch(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbTransaction_refresh (NdbTransaction *larg1) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->refresh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbTransaction_close (NdbTransaction *larg1) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->close();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbTransaction_restart (NdbTransaction *larg1) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->restart();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_getGCI__SWIG_0 (NdbTransaction *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint64 *arg2 = (Uint64 *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getGCI(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_getGCI__SWIG_1 (NdbTransaction *larg1) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->getGCI();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint64 *_wrap_NdbTransaction_getTransactionId (NdbTransaction *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)(arg1)->getTransactionId();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT NdbTransaction::CommitStatusType _wrap_NdbTransaction_commitStatus (NdbTransaction *larg1) {
  NdbTransaction::CommitStatusType lresult = (NdbTransaction::CommitStatusType)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbTransaction::CommitStatusType result;
  
  arg1 = larg1;
  try {
    result = (NdbTransaction::CommitStatusType)(arg1)->commitStatus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbTransaction::CommitStatusType)0;
  }
}


EXPORT NdbError *_wrap_NdbTransaction_getNdbError (NdbTransaction *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbTransaction const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getNdbErrorOperation__SWIG_0 (NdbTransaction *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)(arg1)->getNdbErrorOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getNdbErrorOperation__SWIG_1 (NdbTransaction *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbTransaction const *)arg1)->getNdbErrorOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT int _wrap_NdbTransaction_getNdbErrorLine (NdbTransaction *larg1) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->getNdbErrorLine();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getNextCompletedOperation (NdbTransaction *larg1, NdbOperation *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbOperation *arg2 = (NdbOperation *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)((NdbTransaction const *)arg1)->getNextCompletedOperation((NdbOperation const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getFirstDefinedOperation (NdbTransaction *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbTransaction const *)arg1)->getFirstDefinedOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_getLastDefinedOperation (NdbTransaction *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbTransaction const *)arg1)->getLastDefinedOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT int _wrap_NdbTransaction_executePendingBlobOps__SWIG_0 (NdbTransaction *larg1, Uint8 larg2) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint8 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->executePendingBlobOps(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbTransaction_executePendingBlobOps__SWIG_1 (NdbTransaction *larg1) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->executePendingBlobOps();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 _wrap_NdbTransaction_getConnectedNodeId (NdbTransaction *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)(arg1)->getConnectedNodeId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_readTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, NdbOperation::LockMode larg6, unsigned char *larg7, NdbOperation::OperationOptions *larg8, Uint32 larg9) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation::LockMode arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg8 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg9 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (NdbOperation *)(arg1)->readTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,arg6,(unsigned char const *)arg7,(NdbOperation::OperationOptions const *)arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_readTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, NdbOperation::LockMode larg6, unsigned char *larg7, NdbOperation::OperationOptions *larg8) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation::LockMode arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg8 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbOperation *)(arg1)->readTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,arg6,(unsigned char const *)arg7,(NdbOperation::OperationOptions const *)arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_readTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, NdbOperation::LockMode larg6, unsigned char *larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation::LockMode arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->readTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,arg6,(unsigned char const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_readTuple__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, NdbOperation::LockMode larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation::LockMode arg6 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->readTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_readTuple__SWIG_4 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->readTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7, Uint32 larg8) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg8 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_4 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, unsigned char *larg4, NdbOperation::OperationOptions *larg5, Uint32 larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg5 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg6 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(unsigned char const *)arg4,(NdbOperation::OperationOptions const *)arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_5 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, unsigned char *larg4, NdbOperation::OperationOptions *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg5 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(unsigned char const *)arg4,(NdbOperation::OperationOptions const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_6 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, unsigned char *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3,(unsigned char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_insertTuple__SWIG_7 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOperation *)(arg1)->insertTuple((NdbRecord const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_updateTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7, Uint32 larg8) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg8 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbOperation *)(arg1)->updateTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_updateTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->updateTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_updateTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->updateTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_updateTuple__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->updateTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_writeTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7, Uint32 larg8) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg8 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbOperation *)(arg1)->writeTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_writeTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->writeTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_writeTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->writeTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5,(unsigned char const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_writeTuple__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->writeTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_deleteTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7, Uint32 larg8) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg8 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbOperation *)(arg1)->deleteTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_deleteTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6, NdbOperation::OperationOptions *larg7) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation::OperationOptions *arg7 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbOperation *)(arg1)->deleteTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,(unsigned char const *)arg6,(NdbOperation::OperationOptions const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_deleteTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5, unsigned char *larg6) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbOperation *)(arg1)->deleteTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5,(unsigned char const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_deleteTuple__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4, char *larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  char *arg5 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->deleteTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_deleteTuple__SWIG_4 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbRecord *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->deleteTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbRecord const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_refreshTuple__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbOperation::OperationOptions *larg4, Uint32 larg5) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbOperation::OperationOptions *arg4 = (NdbOperation::OperationOptions *) 0 ;
  Uint32 arg5 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbOperation *)(arg1)->refreshTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbOperation::OperationOptions const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_refreshTuple__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3, NdbOperation::OperationOptions *larg4) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbOperation::OperationOptions *arg4 = (NdbOperation::OperationOptions *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbOperation *)(arg1)->refreshTuple((NdbRecord const *)arg2,(char const *)arg3,(NdbOperation::OperationOptions const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_refreshTuple__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, char *larg3) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOperation *)(arg1)->refreshTuple((NdbRecord const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_scanTable__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, NdbOperation::LockMode larg3, unsigned char *larg4, NdbScanOperation::ScanOptions *larg5, Uint32 larg6) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbScanOperation::ScanOptions *arg5 = (NdbScanOperation::ScanOptions *) 0 ;
  Uint32 arg6 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbScanOperation *)(arg1)->scanTable((NdbRecord const *)arg2,arg3,(unsigned char const *)arg4,(NdbScanOperation::ScanOptions const *)arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_scanTable__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, NdbOperation::LockMode larg3, unsigned char *larg4, NdbScanOperation::ScanOptions *larg5) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbScanOperation::ScanOptions *arg5 = (NdbScanOperation::ScanOptions *) 0 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbScanOperation *)(arg1)->scanTable((NdbRecord const *)arg2,arg3,(unsigned char const *)arg4,(NdbScanOperation::ScanOptions const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_scanTable__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, NdbOperation::LockMode larg3, unsigned char *larg4) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbScanOperation *)(arg1)->scanTable((NdbRecord const *)arg2,arg3,(unsigned char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_scanTable__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, NdbOperation::LockMode larg3) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg3 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbScanOperation *)(arg1)->scanTable((NdbRecord const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbScanOperation *_wrap_NdbTransaction_scanTable__SWIG_4 (NdbTransaction *larg1, NdbRecord *larg2) {
  NdbScanOperation * lresult = (NdbScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbScanOperation *)(arg1)->scanTable((NdbRecord const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_0 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3, NdbOperation::LockMode larg4, unsigned char *larg5, NdbIndexScanOperation::IndexBound *larg6, NdbScanOperation::ScanOptions *larg7, Uint32 larg8) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbIndexScanOperation::IndexBound *arg6 = (NdbIndexScanOperation::IndexBound *) 0 ;
  NdbScanOperation::ScanOptions *arg7 = (NdbScanOperation::ScanOptions *) 0 ;
  Uint32 arg8 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbIndexScanOperation::IndexBound const *)arg6,(NdbScanOperation::ScanOptions const *)arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_1 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3, NdbOperation::LockMode larg4, unsigned char *larg5, NdbIndexScanOperation::IndexBound *larg6, NdbScanOperation::ScanOptions *larg7) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbIndexScanOperation::IndexBound *arg6 = (NdbIndexScanOperation::IndexBound *) 0 ;
  NdbScanOperation::ScanOptions *arg7 = (NdbScanOperation::ScanOptions *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbIndexScanOperation::IndexBound const *)arg6,(NdbScanOperation::ScanOptions const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_2 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3, NdbOperation::LockMode larg4, unsigned char *larg5, NdbIndexScanOperation::IndexBound *larg6) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbIndexScanOperation::IndexBound *arg6 = (NdbIndexScanOperation::IndexBound *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5,(NdbIndexScanOperation::IndexBound const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_3 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3, NdbOperation::LockMode larg4, unsigned char *larg5) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3,arg4,(unsigned char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_4 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3, NdbOperation::LockMode larg4) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbOperation::LockMode arg4 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbIndexScanOperation *_wrap_NdbTransaction_scanIndex__SWIG_5 (NdbTransaction *larg1, NdbRecord *larg2, NdbRecord *larg3) {
  NdbIndexScanOperation * lresult = (NdbIndexScanOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbRecord *arg2 = (NdbRecord *) 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbIndexScanOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbIndexScanOperation *)(arg1)->scanIndex((NdbRecord const *)arg2,(NdbRecord const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexScanOperation *)0;
  }
}


EXPORT NdbQuery *_wrap_NdbTransaction_createQuery__SWIG_0 (NdbTransaction *larg1, NdbQueryDef *larg2, NdbQueryParamValue *larg3, NdbOperation::LockMode larg4) {
  NdbQuery * lresult = (NdbQuery *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbQueryDef *arg2 = (NdbQueryDef *) 0 ;
  NdbQueryParamValue *arg3 ;
  NdbOperation::LockMode arg4 ;
  NdbQuery *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (NdbQuery *)(arg1)->createQuery((NdbQueryDef const *)arg2,(NdbQueryParamValue const (*))arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbQuery *)0;
  }
}


EXPORT NdbQuery *_wrap_NdbTransaction_createQuery__SWIG_1 (NdbTransaction *larg1, NdbQueryDef *larg2, NdbQueryParamValue *larg3) {
  NdbQuery * lresult = (NdbQuery *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbQueryDef *arg2 = (NdbQueryDef *) 0 ;
  NdbQueryParamValue *arg3 ;
  NdbQuery *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbQuery *)(arg1)->createQuery((NdbQueryDef const *)arg2,(NdbQueryParamValue const (*))arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbQuery *)0;
  }
}


EXPORT NdbQuery *_wrap_NdbTransaction_createQuery__SWIG_2 (NdbTransaction *larg1, NdbQueryDef *larg2) {
  NdbQuery * lresult = (NdbQuery *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbQueryDef *arg2 = (NdbQueryDef *) 0 ;
  NdbQuery *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbQuery *)(arg1)->createQuery((NdbQueryDef const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbQuery *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_unlock__SWIG_0 (NdbTransaction *larg1, NdbLockHandle *larg2, NdbOperation::AbortOption larg3) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbLockHandle *arg2 = (NdbLockHandle *) 0 ;
  NdbOperation::AbortOption arg3 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOperation *)(arg1)->unlock((NdbLockHandle const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbTransaction_unlock__SWIG_1 (NdbTransaction *larg1, NdbLockHandle *larg2) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbLockHandle *arg2 = (NdbLockHandle *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbOperation *)(arg1)->unlock((NdbLockHandle const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT int _wrap_NdbTransaction_releaseLockHandle (NdbTransaction *larg1, NdbLockHandle *larg2) {
  int lresult = (int)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  NdbLockHandle *arg2 = (NdbLockHandle *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->releaseLockHandle((NdbLockHandle const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint32 _wrap_NdbTransaction_getMaxPendingBlobReadBytes (NdbTransaction *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbTransaction const *)arg1)->getMaxPendingBlobReadBytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint32 _wrap_NdbTransaction_getMaxPendingBlobWriteBytes (NdbTransaction *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbTransaction const *)arg1)->getMaxPendingBlobWriteBytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT void _wrap_NdbTransaction_setMaxPendingBlobReadBytes (NdbTransaction *larg1, Uint32 larg2) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxPendingBlobReadBytes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbTransaction_setMaxPendingBlobWriteBytes (NdbTransaction *larg1, Uint32 larg2) {
  NdbTransaction *arg1 = (NdbTransaction *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxPendingBlobWriteBytes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexOperation_insertTuple (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->insertTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_readTuple__SWIG_0 (NdbIndexOperation *larg1, NdbOperation::LockMode larg2) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  NdbOperation::LockMode arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->readTuple(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_readTuple__SWIG_1 (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_readTupleExclusive (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->readTupleExclusive();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_simpleRead (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->simpleRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_dirtyRead (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->dirtyRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_committedRead (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->committedRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_updateTuple (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->updateTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_deleteTuple (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->deleteTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Index *_wrap_NdbIndexOperation_getIndex (NdbIndexOperation *larg1) {
  NdbDictionary::Index * lresult = (NdbDictionary::Index *)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  NdbDictionary::Index *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Index *)((NdbIndexOperation const *)arg1)->getIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Index *)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_dirtyUpdate (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->dirtyUpdate();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_interpretedUpdateTuple (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpretedUpdateTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexOperation_interpretedDeleteTuple (NdbIndexOperation *larg1) {
  int lresult = (int)0 ;
  NdbIndexOperation *arg1 = (NdbIndexOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpretedDeleteTuple();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbIndexStat *_wrap_new_NdbIndexStat () {
  NdbIndexStat * lresult = (NdbIndexStat *)0 ;
  NdbIndexStat *result = 0 ;
  
  try {
    result = (NdbIndexStat *)new NdbIndexStat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexStat *)0;
  }
}


EXPORT void _wrap_delete_NdbIndexStat (NdbIndexStat *larg1) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbIndexStat::Error *_wrap_NdbIndexStat_getNdbError (NdbIndexStat *larg1) {
  NdbIndexStat::Error * lresult = (NdbIndexStat::Error *)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbIndexStat::Error *) &((NdbIndexStat const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexStat::Error *)0;
  }
}


EXPORT int _wrap_NdbIndexStat_records_in_range (NdbIndexStat *larg1, NdbDictionary::Index *larg2, NdbTransaction *larg3, NdbRecord *larg4, NdbRecord *larg5, NdbIndexScanOperation::IndexBound *larg6, Uint64 *larg7, Uint64 *larg8, int larg9) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbDictionary::Index *arg2 = (NdbDictionary::Index *) 0 ;
  NdbTransaction *arg3 = (NdbTransaction *) 0 ;
  NdbRecord *arg4 = (NdbRecord *) 0 ;
  NdbRecord *arg5 = (NdbRecord *) 0 ;
  NdbIndexScanOperation::IndexBound *arg6 = (NdbIndexScanOperation::IndexBound *) 0 ;
  Uint64 arg7 ;
  Uint64 *arg8 = (Uint64 *) 0 ;
  int arg9 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = *larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (int)(arg1)->records_in_range((NdbDictionary::Index const *)arg2,arg3,(NdbRecord const *)arg4,(NdbRecord const *)arg5,(NdbIndexScanOperation::IndexBound const *)arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_create_systables (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->create_systables(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_drop_systables (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->drop_systables(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_check_systables (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->check_systables(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_set_index (NdbIndexStat *larg1, NdbDictionary::Index *larg2, NdbDictionary::Table *larg3) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbDictionary::Index *arg2 = 0 ;
  NdbDictionary::Table *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->set_index((NdbDictionary::Index const &)*arg2,(NdbDictionary::Table const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_reset_index (NdbIndexStat *larg1) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reset_index();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexStat_update_stat (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->update_stat(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_delete_stat (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->delete_stat(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_move_cache (NdbIndexStat *larg1) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->move_cache();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_clean_cache (NdbIndexStat *larg1) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clean_cache();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_get_cache_info (NdbIndexStat *larg1, NdbIndexStat::CacheInfo *larg2, NdbIndexStat::CacheType larg3) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::CacheInfo *arg2 = 0 ;
  NdbIndexStat::CacheType arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((NdbIndexStat const *)arg1)->get_cache_info(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_get_head (NdbIndexStat *larg1, NdbIndexStat::Head *larg2) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Head *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((NdbIndexStat const *)arg1)->get_head(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexStat_read_head (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->read_head(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_read_stat (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->read_stat(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_add_bound (NdbIndexStat *larg1, NdbIndexStat::Bound *larg2, void *larg3) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Bound *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->add_bound(*arg2,(void const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_add_bound_null (NdbIndexStat *larg1, NdbIndexStat::Bound *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Bound *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->add_bound_null(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_set_bound_strict (NdbIndexStat *larg1, NdbIndexStat::Bound *larg2, int larg3) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Bound *arg2 = 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->set_bound_strict(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_reset_bound (NdbIndexStat *larg1, NdbIndexStat::Bound *larg2) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Bound *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset_bound(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexStat_finalize_range (NdbIndexStat *larg1, NdbIndexStat::Range *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Range *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->finalize_range(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_reset_range (NdbIndexStat *larg1, NdbIndexStat::Range *larg2) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Range *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset_range(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexStat_convert_range (NdbIndexStat *larg1, NdbIndexStat::Range *larg2, NdbRecord *larg3, NdbIndexScanOperation::IndexBound *larg4) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Range *arg2 = 0 ;
  NdbRecord *arg3 = (NdbRecord *) 0 ;
  NdbIndexScanOperation::IndexBound *arg4 = (NdbIndexScanOperation::IndexBound *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->convert_range(*arg2,(NdbRecord const *)arg3,(NdbIndexScanOperation::IndexBound const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_query_stat (NdbIndexStat *larg1, NdbIndexStat::Range *larg2, NdbIndexStat::Stat *larg3) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Range *arg2 = 0 ;
  NdbIndexStat::Stat *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->query_stat((NdbIndexStat::Range const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_get_empty (NdbIndexStat::Stat *larg1, bool *larg2) {
  NdbIndexStat::Stat *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    NdbIndexStat::get_empty((NdbIndexStat::Stat const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_get_rir (NdbIndexStat::Stat *larg1, double *larg2) {
  NdbIndexStat::Stat *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    NdbIndexStat::get_rir((NdbIndexStat::Stat const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_get_rpk (NdbIndexStat::Stat *larg1, Uint32 larg2, double *larg3) {
  NdbIndexStat::Stat *arg1 = 0 ;
  Uint32 arg2 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    NdbIndexStat::get_rpk((NdbIndexStat::Stat const &)*arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbIndexStat_get_rule (NdbIndexStat::Stat *larg1, char *larg2) {
  NdbIndexStat::Stat *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    NdbIndexStat::get_rule((NdbIndexStat::Stat const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbIndexStat_create_sysevents (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->create_sysevents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_drop_sysevents (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->drop_sysevents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_check_sysevents (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->check_sysevents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_create_listener (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->create_listener(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_has_listener (NdbIndexStat *larg1) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbIndexStat const *)arg1)->has_listener();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_execute_listener (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->execute_listener(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_poll_listener (NdbIndexStat *larg1, Ndb *larg2, int larg3) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->poll_listener(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_next_listener (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->next_listener(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbIndexStat_drop_listener (NdbIndexStat *larg1, Ndb *larg2) {
  int lresult = (int)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->drop_listener(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbIndexStat_set_mem_handler (NdbIndexStat *larg1, NdbIndexStat::Mem *larg2) {
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStat::Mem *arg2 = (NdbIndexStat::Mem *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_mem_handler(arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbIndexStatImpl *_wrap_NdbIndexStat_getImpl (NdbIndexStat *larg1) {
  NdbIndexStatImpl * lresult = (NdbIndexStatImpl *)0 ;
  NdbIndexStat *arg1 = (NdbIndexStat *) 0 ;
  NdbIndexStatImpl *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbIndexStatImpl *) &(arg1)->getImpl();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbIndexStatImpl *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_0 (NdbDictionary::Table *larg1, Uint32 *larg2, Uint32 larg3) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 arg3 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbDictionary::Table const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_1 (NdbDictionary::Table *larg1, Uint32 *larg2) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbDictionary::Table const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_2 (NdbDictionary::Table *larg1) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbDictionary::Table *arg1 = (NdbDictionary::Table *) 0 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbDictionary::Table const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_3 () {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbInterpretedCode *result = 0 ;
  
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_4 (NdbRecord *larg1, Uint32 *larg2, Uint32 larg3) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbRecord *arg1 = 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  Uint32 arg3 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbRecord const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_5 (NdbRecord *larg1, Uint32 *larg2) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbRecord *arg1 = 0 ;
  Uint32 *arg2 = (Uint32 *) 0 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbRecord const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_new_NdbInterpretedCode__SWIG_6 (NdbRecord *larg1) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbRecord *arg1 = 0 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbInterpretedCode *)new NdbInterpretedCode((NdbRecord const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT void _wrap_delete_NdbInterpretedCode (NdbInterpretedCode *larg1) {
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbInterpretedCode_reset (NdbInterpretedCode *larg1) {
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reset();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbInterpretedCode_load_const_null (NdbInterpretedCode *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->load_const_null(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_load_const_u16 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->load_const_u16(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_load_const_u32 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->load_const_u32(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_load_const_u64 (NdbInterpretedCode *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->load_const_u64(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_read_attr__SWIG_0 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->read_attr(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_read_attr__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, NdbDictionary::Column *larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  NdbDictionary::Column *arg3 = (NdbDictionary::Column *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->read_attr(arg2,(NdbDictionary::Column const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_write_attr__SWIG_0 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->write_attr(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_write_attr__SWIG_1 (NdbInterpretedCode *larg1, NdbDictionary::Column *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  NdbDictionary::Column *arg2 = (NdbDictionary::Column *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->write_attr((NdbDictionary::Column const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_add_reg (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->add_reg(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_sub_reg (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->sub_reg(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_def_label (NdbInterpretedCode *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->def_label(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_label (NdbInterpretedCode *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->branch_label(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_ge (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_ge(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_gt (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_gt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_le (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_le(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_lt (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_lt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_eq (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_eq(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_ne (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_ne(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_ne_null (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_ne_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_eq_null (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_eq_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_eq__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_eq((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_ne__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_ne((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_lt__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_lt((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_le__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_le((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_gt__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_gt((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_ge__SWIG_0 (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_ge((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_eq__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_eq(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_ne__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_ne(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_lt__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_lt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_le__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_le(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_gt__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_gt(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_ge__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->branch_col_ge(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_eq_null (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_col_eq_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_ne_null (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->branch_col_ne_null(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_like (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_like((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_notlike (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_notlike((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_and_mask_eq_mask (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_and_mask_eq_mask((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_and_mask_ne_mask (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_and_mask_ne_mask((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_and_mask_eq_zero (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_and_mask_eq_zero((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_branch_col_and_mask_ne_zero (NdbInterpretedCode *larg1, void *larg2, Uint32 larg3, Uint32 larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->branch_col_and_mask_ne_zero((void const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_interpret_exit_ok (NdbInterpretedCode *larg1) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_ok();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_interpret_exit_nok__SWIG_0 (NdbInterpretedCode *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->interpret_exit_nok(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_interpret_exit_nok__SWIG_1 (NdbInterpretedCode *larg1) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_nok();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_interpret_exit_last_row (NdbInterpretedCode *larg1) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->interpret_exit_last_row();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_add_val__SWIG_0 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->add_val(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_add_val__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->add_val(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_sub_val__SWIG_0 (NdbInterpretedCode *larg1, Uint32 larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->sub_val(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_sub_val__SWIG_1 (NdbInterpretedCode *larg1, Uint32 larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->sub_val(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_def_sub (NdbInterpretedCode *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->def_sub(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_call_sub (NdbInterpretedCode *larg1, Uint32 larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->call_sub(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_ret_sub (NdbInterpretedCode *larg1) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->ret_sub();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_finalise (NdbInterpretedCode *larg1) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->finalise();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_NdbInterpretedCode_getTable (NdbInterpretedCode *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)((NdbInterpretedCode const *)arg1)->getTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbError *_wrap_NdbInterpretedCode_getNdbError (NdbInterpretedCode *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbInterpretedCode const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT Uint32 _wrap_NdbInterpretedCode_getWordsUsed (NdbInterpretedCode *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbInterpretedCode const *)arg1)->getWordsUsed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_NdbInterpretedCode_copy (NdbInterpretedCode *larg1, NdbInterpretedCode *larg2) {
  int lresult = (int)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  NdbInterpretedCode *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->copy((NdbInterpretedCode const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbScanFilter *_wrap_new_NdbScanFilter__SWIG_0 (NdbInterpretedCode *larg1) {
  NdbScanFilter * lresult = (NdbScanFilter *)0 ;
  NdbInterpretedCode *arg1 = (NdbInterpretedCode *) 0 ;
  NdbScanFilter *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbScanFilter *)new NdbScanFilter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanFilter *)0;
  }
}


EXPORT NdbScanFilter *_wrap_new_NdbScanFilter__SWIG_1 (NdbOperation *larg1) {
  NdbScanFilter * lresult = (NdbScanFilter *)0 ;
  NdbOperation *arg1 = (NdbOperation *) 0 ;
  NdbScanFilter *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbScanFilter *)new NdbScanFilter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbScanFilter *)0;
  }
}


EXPORT void _wrap_delete_NdbScanFilter (NdbScanFilter *larg1) {
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbScanFilter_begin__SWIG_0 (NdbScanFilter *larg1, NdbScanFilter::Group larg2) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbScanFilter::Group arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->begin(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_begin__SWIG_1 (NdbScanFilter *larg1) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->begin();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_end (NdbScanFilter *larg1) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->end();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbScanFilter_reset (NdbScanFilter *larg1) {
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reset();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbScanFilter_istrue (NdbScanFilter *larg1) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->istrue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_isfalse (NdbScanFilter *larg1) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->isfalse();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_cmp__SWIG_0 (NdbScanFilter *larg1, NdbScanFilter::BinaryCondition larg2, int larg3, void *larg4, Uint32 larg5) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbScanFilter::BinaryCondition arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  Uint32 arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->cmp(arg2,arg3,(void const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_cmp__SWIG_1 (NdbScanFilter *larg1, NdbScanFilter::BinaryCondition larg2, int larg3, void *larg4) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbScanFilter::BinaryCondition arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->cmp(arg2,arg3,(void const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_cmp__SWIG_2 (NdbScanFilter *larg1, NdbScanFilter::BinaryCondition larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbScanFilter::BinaryCondition arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)(arg1)->cmp(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_eq__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->eq(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_ne__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->ne(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_lt__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->lt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_le__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->le(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_gt__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->gt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_ge__SWIG_0 (NdbScanFilter *larg1, int larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->ge(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_eq__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->eq(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_ne__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->ne(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_lt__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->lt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_le__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->le(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_gt__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->gt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_ge__SWIG_1 (NdbScanFilter *larg1, int larg2, Uint64 *larg3) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  Uint64 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)(arg1)->ge(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_isnull (NdbScanFilter *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->isnull(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbScanFilter_isnotnull (NdbScanFilter *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->isnotnull(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbError *_wrap_NdbScanFilter_getNdbError (NdbScanFilter *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbScanFilter const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT NdbInterpretedCode *_wrap_NdbScanFilter_getInterpretedCode (NdbScanFilter *larg1) {
  NdbInterpretedCode * lresult = (NdbInterpretedCode *)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbInterpretedCode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbInterpretedCode *)((NdbScanFilter const *)arg1)->getInterpretedCode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbInterpretedCode *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbScanFilter_getNdbOperation (NdbScanFilter *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbScanFilter *arg1 = (NdbScanFilter *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbScanFilter const *)arg1)->getNdbOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_NdbRecAttr_getColumn (NdbRecAttr *larg1) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column *)((NdbRecAttr const *)arg1)->getColumn();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT NdbDictionary::Column::Type _wrap_NdbRecAttr_getType (NdbRecAttr *larg1) {
  NdbDictionary::Column::Type lresult = (NdbDictionary::Column::Type)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  NdbDictionary::Column::Type result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column::Type)((NdbRecAttr const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column::Type)0;
  }
}


EXPORT Uint32 _wrap_NdbRecAttr_get_size_in_bytes (NdbRecAttr *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbRecAttr const *)arg1)->get_size_in_bytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT int _wrap_NdbRecAttr_isNULL (NdbRecAttr *larg1) {
  int lresult = (int)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbRecAttr const *)arg1)->isNULL();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Int64 *_wrap_NdbRecAttr_int64_value (NdbRecAttr *larg1) {
  Int64 * lresult = (Int64 *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Int64 result;
  
  arg1 = larg1;
  try {
    result = (Int64)((NdbRecAttr const *)arg1)->int64_value();
    lresult = new Int64(result);
    return lresult;
  } catch (...) {
    return (Int64 *)0;
  }
}


EXPORT Int32 _wrap_NdbRecAttr_int32_value (NdbRecAttr *larg1) {
  Int32 lresult = (Int32)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Int32 result;
  
  arg1 = larg1;
  try {
    result = (Int32)((NdbRecAttr const *)arg1)->int32_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Int32)0;
  }
}


EXPORT Int32 _wrap_NdbRecAttr_medium_value (NdbRecAttr *larg1) {
  Int32 lresult = (Int32)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Int32 result;
  
  arg1 = larg1;
  try {
    result = (Int32)((NdbRecAttr const *)arg1)->medium_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Int32)0;
  }
}


EXPORT short _wrap_NdbRecAttr_short_value (NdbRecAttr *larg1) {
  short lresult = (short)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  short result;
  
  arg1 = larg1;
  try {
    result = (short)((NdbRecAttr const *)arg1)->short_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (short)0;
  }
}


EXPORT char _wrap_NdbRecAttr_char_value (NdbRecAttr *larg1) {
  char lresult = (char)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  char result;
  
  arg1 = larg1;
  try {
    result = (char)((NdbRecAttr const *)arg1)->char_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char)0;
  }
}


EXPORT Int8 _wrap_NdbRecAttr_int8_value (NdbRecAttr *larg1) {
  Int8 lresult = (Int8)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Int8 result;
  
  arg1 = larg1;
  try {
    result = (Int8)((NdbRecAttr const *)arg1)->int8_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Int8)0;
  }
}


EXPORT Uint64 *_wrap_NdbRecAttr_u_64_value (NdbRecAttr *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbRecAttr const *)arg1)->u_64_value();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint32 _wrap_NdbRecAttr_u_32_value (NdbRecAttr *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbRecAttr const *)arg1)->u_32_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint32 _wrap_NdbRecAttr_u_medium_value (NdbRecAttr *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbRecAttr const *)arg1)->u_medium_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint16 _wrap_NdbRecAttr_u_short_value (NdbRecAttr *larg1) {
  Uint16 lresult = (Uint16)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint16 result;
  
  arg1 = larg1;
  try {
    result = (Uint16)((NdbRecAttr const *)arg1)->u_short_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint16)0;
  }
}


EXPORT Uint8 _wrap_NdbRecAttr_u_char_value (NdbRecAttr *larg1) {
  Uint8 lresult = (Uint8)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint8 result;
  
  arg1 = larg1;
  try {
    result = (Uint8)((NdbRecAttr const *)arg1)->u_char_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint8)0;
  }
}


EXPORT Uint8 _wrap_NdbRecAttr_u_8_value (NdbRecAttr *larg1) {
  Uint8 lresult = (Uint8)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  Uint8 result;
  
  arg1 = larg1;
  try {
    result = (Uint8)((NdbRecAttr const *)arg1)->u_8_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint8)0;
  }
}


EXPORT float _wrap_NdbRecAttr_float_value (NdbRecAttr *larg1) {
  float lresult = (float)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((NdbRecAttr const *)arg1)->float_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT double _wrap_NdbRecAttr_double_value (NdbRecAttr *larg1) {
  double lresult = (double)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)((NdbRecAttr const *)arg1)->double_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT char *_wrap_NdbRecAttr_aRef (NdbRecAttr *larg1) {
  char * lresult = (char *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((NdbRecAttr const *)arg1)->aRef();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbRecAttr_clone (NdbRecAttr *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbRecAttr const *)arg1)->clone();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT void _wrap_delete_NdbRecAttr (NdbRecAttr *larg1) {
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbRecAttr *_wrap_NdbRecAttr_next (NdbRecAttr *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbRecAttr *arg1 = (NdbRecAttr *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbRecAttr const *)arg1)->next();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecordPrintFormat *_wrap_new_NdbRecordPrintFormat () {
  NdbRecordPrintFormat * lresult = (NdbRecordPrintFormat *)0 ;
  NdbRecordPrintFormat *result = 0 ;
  
  try {
    result = (NdbRecordPrintFormat *)new NdbRecordPrintFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecordPrintFormat *)0;
  }
}


EXPORT void _wrap_delete_NdbRecordPrintFormat (NdbRecordPrintFormat *larg1) {
  NdbRecordPrintFormat *arg1 = (NdbRecordPrintFormat *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT NdbOut *_wrap_ndbrecattr_print_formatted (NdbOut *larg1, NdbRecAttr *larg2, NdbRecordPrintFormat *larg3) {
  NdbOut * lresult = (NdbOut *)0 ;
  NdbOut *arg1 = 0 ;
  NdbRecAttr *arg2 = 0 ;
  NdbRecordPrintFormat *arg3 = 0 ;
  NdbOut *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbOut *) &ndbrecattr_print_formatted(*arg1,(NdbRecAttr const &)*arg2,(NdbRecordPrintFormat const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOut *)0;
  }
}


EXPORT NdbEventOperation::State _wrap_NdbEventOperation_getState (NdbEventOperation *larg1) {
  NdbEventOperation::State lresult = (NdbEventOperation::State)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbEventOperation::State result;
  
  arg1 = larg1;
  try {
    result = (NdbEventOperation::State)(arg1)->getState();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbEventOperation::State)0;
  }
}


EXPORT void _wrap_NdbEventOperation_mergeEvents (NdbEventOperation *larg1, int larg2) {
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->mergeEvents(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbEventOperation_execute (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->execute();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getValue__SWIG_0 (NdbEventOperation *larg1, char *larg2, char *larg3) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getValue__SWIG_1 (NdbEventOperation *larg1, char *larg2) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbRecAttr *)(arg1)->getValue((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getPreValue__SWIG_0 (NdbEventOperation *larg1, char *larg2, char *larg3) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (NdbRecAttr *)(arg1)->getPreValue((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getPreValue__SWIG_1 (NdbEventOperation *larg1, char *larg2) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbRecAttr *)(arg1)->getPreValue((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbEventOperation_getBlobHandle (NdbEventOperation *larg1, char *larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getBlobHandle((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbEventOperation_getPreBlobHandle (NdbEventOperation *larg1, char *larg2) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  char *arg2 = (char *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (NdbBlob *)(arg1)->getPreBlobHandle((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT int _wrap_NdbEventOperation_isOverrun (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbEventOperation const *)arg1)->isOverrun();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_isConsistent (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbEventOperation const *)arg1)->isConsistent();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Event::TableEvent _wrap_NdbEventOperation_getEventType2 (NdbEventOperation *larg1) {
  NdbDictionary::Event::TableEvent lresult = (NdbDictionary::Event::TableEvent)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbDictionary::Event::TableEvent result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event::TableEvent)((NdbEventOperation const *)arg1)->getEventType2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event::TableEvent)0;
  }
}


EXPORT NdbDictionary::Event::TableEvent _wrap_NdbEventOperation_getEventType (NdbEventOperation *larg1) {
  NdbDictionary::Event::TableEvent lresult = (NdbDictionary::Event::TableEvent)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbDictionary::Event::TableEvent result;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event::TableEvent)((NdbEventOperation const *)arg1)->getEventType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event::TableEvent)0;
  }
}


EXPORT int _wrap_NdbEventOperation_tableNameChanged (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbEventOperation const *)arg1)->tableNameChanged();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_tableFrmChanged (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbEventOperation const *)arg1)->tableFrmChanged();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_tableFragmentationChanged (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbEventOperation const *)arg1)->tableFragmentationChanged();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_tableRangeListChanged (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((NdbEventOperation const *)arg1)->tableRangeListChanged();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Uint64 *_wrap_NdbEventOperation_getEpoch (NdbEventOperation *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbEventOperation const *)arg1)->getEpoch();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint64 *_wrap_NdbEventOperation_getGCI (NdbEventOperation *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbEventOperation const *)arg1)->getGCI();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint32 _wrap_NdbEventOperation_getAnyValue (NdbEventOperation *larg1) {
  Uint32 lresult = (Uint32)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  Uint32 result;
  
  arg1 = larg1;
  try {
    result = (Uint32)((NdbEventOperation const *)arg1)->getAnyValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Uint32)0;
  }
}


EXPORT Uint64 *_wrap_NdbEventOperation_getLatestGCI (NdbEventOperation *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbEventOperation const *)arg1)->getLatestGCI();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT Uint64 *_wrap_NdbEventOperation_getTransId (NdbEventOperation *larg1) {
  Uint64 * lresult = (Uint64 *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  Uint64 result;
  
  arg1 = larg1;
  try {
    result = (Uint64)((NdbEventOperation const *)arg1)->getTransId();
    lresult = new Uint64(result);
    return lresult;
  } catch (...) {
    return (Uint64 *)0;
  }
}


EXPORT NdbError *_wrap_NdbEventOperation_getNdbError (NdbEventOperation *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbEventOperation const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT void _wrap_NdbEventOperation_setAllowEmptyUpdate (NdbEventOperation *larg1, int larg2) {
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAllowEmptyUpdate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbEventOperation_getAllowEmptyUpdate (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->getAllowEmptyUpdate();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_isEmptyEpoch (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->isEmptyEpoch();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_isErrorEpoch__SWIG_0 (NdbEventOperation *larg1, NdbDictionary::Event::TableEvent *larg2) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbDictionary::Event::TableEvent *arg2 = (NdbDictionary::Event::TableEvent *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->isErrorEpoch(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_isErrorEpoch__SWIG_1 (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->isErrorEpoch();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Table *_wrap_NdbEventOperation_getTable (NdbEventOperation *larg1) {
  NdbDictionary::Table * lresult = (NdbDictionary::Table *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbDictionary::Table *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Table *)((NdbEventOperation const *)arg1)->getTable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Table *)0;
  }
}


EXPORT NdbDictionary::Event *_wrap_NdbEventOperation_getEvent (NdbEventOperation *larg1) {
  NdbDictionary::Event * lresult = (NdbDictionary::Event *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbDictionary::Event *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Event *)((NdbEventOperation const *)arg1)->getEvent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Event *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getFirstPkAttr (NdbEventOperation *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbEventOperation const *)arg1)->getFirstPkAttr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getFirstPkPreAttr (NdbEventOperation *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbEventOperation const *)arg1)->getFirstPkPreAttr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getFirstDataAttr (NdbEventOperation *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbEventOperation const *)arg1)->getFirstDataAttr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT NdbRecAttr *_wrap_NdbEventOperation_getFirstDataPreAttr (NdbEventOperation *larg1) {
  NdbRecAttr * lresult = (NdbRecAttr *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  NdbRecAttr *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbRecAttr *)((NdbEventOperation const *)arg1)->getFirstDataPreAttr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbRecAttr *)0;
  }
}


EXPORT void _wrap_NdbEventOperation_setCustomData (NdbEventOperation *larg1, void *larg2) {
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCustomData(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_NdbEventOperation_getCustomData (NdbEventOperation *larg1) {
  void * lresult = (void *)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((NdbEventOperation const *)arg1)->getCustomData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_NdbEventOperation_clearError (NdbEventOperation *larg1) {
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearError();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbEventOperation_hasError (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbEventOperation const *)arg1)->hasError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_getReqNodeId (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbEventOperation const *)arg1)->getReqNodeId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbEventOperation_getNdbdNodeId (NdbEventOperation *larg1) {
  int lresult = (int)0 ;
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((NdbEventOperation const *)arg1)->getNdbdNodeId();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NdbEventOperation_print (NdbEventOperation *larg1) {
  NdbEventOperation *arg1 = (NdbEventOperation *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->print();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_create_instance (Ndb_cluster_connection *larg1, Uint32 larg2, Uint32 larg3, Uint32 larg4) {
  int lresult = (int)0 ;
  Ndb_cluster_connection *arg1 = (Ndb_cluster_connection *) 0 ;
  Uint32 arg2 ;
  Uint32 arg3 ;
  Uint32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)create_instance(arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_drop_instance () {
  try {
    drop_instance();
    
  } catch (...) {
    
  }
}


EXPORT Ndb *_wrap_get_ndb_object (Uint32 *larg1, char *larg2, char *larg3) {
  Ndb * lresult = (Ndb *)0 ;
  Uint32 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Ndb *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Ndb *)get_ndb_object(*arg1,(char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Ndb *)0;
  }
}


EXPORT void _wrap_return_ndb_object (Ndb *larg1, Uint32 larg2) {
  Ndb *arg1 = (Ndb *) 0 ;
  Uint32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    return_ndb_object(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT NdbBlob::State _wrap_NdbBlob_getState (NdbBlob *larg1) {
  NdbBlob::State lresult = (NdbBlob::State)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbBlob::State result;
  
  arg1 = larg1;
  try {
    result = (NdbBlob::State)(arg1)->getState();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob::State)0;
  }
}


EXPORT void _wrap_NdbBlob_getVersion (NdbBlob *larg1, int *larg2) {
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->getVersion(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbBlob_packBlobHead (NdbBlob::Head *larg1, char *larg2, int larg3) {
  NdbBlob::Head *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    NdbBlob::packBlobHead((NdbBlob::Head const &)*arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NdbBlob_unpackBlobHead (NdbBlob::Head *larg1, char *larg2, int larg3) {
  NdbBlob::Head *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    NdbBlob::unpackBlobHead(*arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NdbBlob_getValue (NdbBlob *larg1, void *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->getValue(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_setValue (NdbBlob *larg1, void *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setValue((void const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_setActiveHook (NdbBlob *larg1, NdbBlob::ActiveHook *larg2, void *larg3) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbBlob::ActiveHook *arg2 = (NdbBlob::ActiveHook *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->setActiveHook(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getDefined (NdbBlob *larg1, int *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getDefined(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getNull__SWIG_0 (NdbBlob *larg1, bool *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  bool *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getNull(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getNull__SWIG_1 (NdbBlob *larg1, int *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getNull(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_setNull (NdbBlob *larg1) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->setNull();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getLength (NdbBlob *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  Uint64 *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getLength(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_truncate__SWIG_0 (NdbBlob *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  Uint64 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (int)(arg1)->truncate(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_truncate__SWIG_1 (NdbBlob *larg1) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->truncate();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getPos (NdbBlob *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  Uint64 *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->getPos(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_setPos (NdbBlob *larg1, Uint64 *larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  Uint64 arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (int)(arg1)->setPos(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_readData (NdbBlob *larg1, void *larg2, Uint32 *larg3) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->readData(arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_writeData (NdbBlob *larg1, void *larg2, Uint32 larg3) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  void *arg2 = (void *) 0 ;
  Uint32 arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->writeData((void const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbDictionary::Column *_wrap_NdbBlob_getColumn (NdbBlob *larg1) {
  NdbDictionary::Column * lresult = (NdbDictionary::Column *)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbDictionary::Column *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbDictionary::Column *)(arg1)->getColumn();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbDictionary::Column *)0;
  }
}


EXPORT int _wrap_NdbBlob_getBlobTableName (char *larg1, Ndb *larg2, char *larg3, char *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)NdbBlob::getBlobTableName(arg1,arg2,(char const *)arg3,(char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_getBlobEventName (char *larg1, Ndb *larg2, char *larg3, char *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  Ndb *arg2 = (Ndb *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)NdbBlob::getBlobEventName(arg1,arg2,(char const *)arg3,(char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT NdbError *_wrap_NdbBlob_getNdbError (NdbBlob *larg1) {
  NdbError * lresult = (NdbError *)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbError *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbError *) &((NdbBlob const *)arg1)->getNdbError();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbError *)0;
  }
}


EXPORT NdbOperation *_wrap_NdbBlob_getNdbOperation (NdbBlob *larg1) {
  NdbOperation * lresult = (NdbOperation *)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbOperation *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbOperation *)((NdbBlob const *)arg1)->getNdbOperation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbOperation *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbBlob_blobsFirstBlob (NdbBlob *larg1) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbBlob *)(arg1)->blobsFirstBlob();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT NdbBlob *_wrap_NdbBlob_blobsNextBlob (NdbBlob *larg1) {
  NdbBlob * lresult = (NdbBlob *)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  NdbBlob *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (NdbBlob *)(arg1)->blobsNextBlob();
    lresult = result;
    return lresult;
  } catch (...) {
    return (NdbBlob *)0;
  }
}


EXPORT int _wrap_NdbBlob_close__SWIG_0 (NdbBlob *larg1, int larg2) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (int)(arg1)->close(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_NdbBlob_close__SWIG_1 (NdbBlob *larg1) {
  int lresult = (int)0 ;
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->close();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_NdbBlob (NdbBlob *larg1) {
  NdbBlob *arg1 = (NdbBlob *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


